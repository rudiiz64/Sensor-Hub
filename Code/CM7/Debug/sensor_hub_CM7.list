
sensor_hub_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f28  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080071c0  080071c0  000171c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071f8  080071f8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080071f8  080071f8  000171f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007200  08007200  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08007218  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08007278  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000750  240000d0  080072d8  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000820  080072d8  00020820  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   00021209  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000347f  00000000  00000000  0004134a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000018c8  00000000  00000000  000447d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000137c  00000000  00000000  00046098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003c160  00000000  00000000  00047414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001fe96  00000000  00000000  00083574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018d119  00000000  00000000  000a340a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006c20  00000000  00000000  00230524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  00237144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080071a8 	.word	0x080071a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080071a8 	.word	0x080071a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <main+0xac>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fa87 	bl	8000c3c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fd57 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f83f 	bl	80007b4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <main+0xac>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <main+0xac>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <main+0xac>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fd31 	bl	80021bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fd47 	bl	80021f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <main+0xac>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fa59 	bl	8000c3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f9c1 	bl	8000b10 <MX_GPIO_Init>
  MX_ETH_Init();
 800078e:	f000 f88d 	bl	80008ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f93f 	bl	8000a14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 f989 	bl	8000aac <MX_USB_OTG_FS_PCD_Init>
  MX_TIM16_Init();
 800079a:	f000 f913 	bl	80009c4 <MX_TIM16_Init>
  MX_I2C1_Init();
 800079e:	f000 f8d1 	bl	8000944 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer
  HAL_TIM_Base_Start_IT(&htim16);
 80007a2:	4803      	ldr	r0, [pc, #12]	; (80007b0 <main+0xb0>)
 80007a4:	f004 fe7c 	bl	80054a0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0xa8>
 80007aa:	bf00      	nop
 80007ac:	58024400 	.word	0x58024400
 80007b0:	24000228 	.word	0x24000228

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09c      	sub	sp, #112	; 0x70
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	224c      	movs	r2, #76	; 0x4c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f006 fcc4 	bl	8007150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f006 fcbe 	bl	8007150 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007d4:	2004      	movs	r0, #4
 80007d6:	f001 ff8f 	bl	80026f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <SystemClock_Config+0xf0>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <SystemClock_Config+0xf0>)
 80007e4:	f023 0301 	bic.w	r3, r3, #1
 80007e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <SystemClock_Config+0xf0>)
 80007ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <SystemClock_Config+0xf4>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fc:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <SystemClock_Config+0xf4>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <SystemClock_Config+0xf4>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000810:	bf00      	nop
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <SystemClock_Config+0xf4>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800081e:	d1f8      	bne.n	8000812 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000824:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	2302      	movs	r3, #2
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000836:	2314      	movs	r3, #20
 8000838:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000846:	230c      	movs	r3, #12
 8000848:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800084a:	2302      	movs	r3, #2
 800084c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4618      	mov	r0, r3
 8000858:	f001 ffb8 	bl	80027cc <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000862:	f000 f9eb 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	233f      	movs	r3, #63	; 0x3f
 8000868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2101      	movs	r1, #1
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fbf7 	bl	8003080 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000898:	f000 f9d0 	bl	8000c3c <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3770      	adds	r7, #112	; 0x70
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58000400 	.word	0x58000400
 80008a8:	58024800 	.word	0x58024800

080008ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_ETH_Init+0x80>)
 80008b2:	4a1f      	ldr	r2, [pc, #124]	; (8000930 <MX_ETH_Init+0x84>)
 80008b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ETH_Init+0x88>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_ETH_Init+0x88>)
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_ETH_Init+0x88>)
 80008c4:	22e1      	movs	r2, #225	; 0xe1
 80008c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ETH_Init+0x88>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_ETH_Init+0x88>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_ETH_Init+0x88>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ETH_Init+0x80>)
 80008dc:	4a15      	ldr	r2, [pc, #84]	; (8000934 <MX_ETH_Init+0x88>)
 80008de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_ETH_Init+0x80>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_ETH_Init+0x80>)
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <MX_ETH_Init+0x8c>)
 80008ea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_ETH_Init+0x80>)
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_ETH_Init+0x90>)
 80008f0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_ETH_Init+0x80>)
 80008f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_ETH_Init+0x80>)
 80008fc:	f000 fe56 	bl	80015ac <HAL_ETH_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000906:	f000 f999 	bl	8000c3c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800090a:	2238      	movs	r2, #56	; 0x38
 800090c:	2100      	movs	r1, #0
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_ETH_Init+0x94>)
 8000910:	f006 fc1e 	bl	8007150 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_ETH_Init+0x94>)
 8000916:	2221      	movs	r2, #33	; 0x21
 8000918:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_ETH_Init+0x94>)
 800091c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000920:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_ETH_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	24000124 	.word	0x24000124
 8000930:	40028000 	.word	0x40028000
 8000934:	24000814 	.word	0x24000814
 8000938:	24000070 	.word	0x24000070
 800093c:	24000010 	.word	0x24000010
 8000940:	240000ec 	.word	0x240000ec

08000944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_I2C1_Init+0x74>)
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <MX_I2C1_Init+0x78>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000950:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <MX_I2C1_Init+0x7c>)
 8000952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_I2C1_Init+0x74>)
 800095c:	2201      	movs	r2, #1
 800095e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000980:	f001 fc4a 	bl	8002218 <HAL_I2C_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800098a:	f000 f957 	bl	8000c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000992:	f001 fcd1 	bl	8002338 <HAL_I2CEx_ConfigAnalogFilter>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800099c:	f000 f94e 	bl	8000c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_I2C1_Init+0x74>)
 80009a4:	f001 fd13 	bl	80023ce <HAL_I2CEx_ConfigDigitalFilter>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ae:	f000 f945 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	240001d4 	.word	0x240001d4
 80009bc:	40005400 	.word	0x40005400
 80009c0:	00909beb 	.word	0x00909beb

080009c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_TIM16_Init+0x48>)
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <MX_TIM16_Init+0x4c>)
 80009cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_TIM16_Init+0x48>)
 80009d0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_TIM16_Init+0x48>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_TIM16_Init+0x48>)
 80009de:	f242 720f 	movw	r2, #9999	; 0x270f
 80009e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_TIM16_Init+0x48>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_TIM16_Init+0x48>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_TIM16_Init+0x48>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_TIM16_Init+0x48>)
 80009f8:	f004 fcfa 	bl	80053f0 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a02:	f000 f91b 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	24000228 	.word	0x24000228
 8000a10:	40014400 	.word	0x40014400

08000a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <MX_USART3_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a5e:	f004 ff97 	bl	8005990 <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f8e8 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a70:	f005 ff99 	bl	80069a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f8df 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a82:	f005 ffce 	bl	8006a22 <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 f8d6 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a92:	f005 ff4f 	bl	8006934 <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f8ce 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000274 	.word	0x24000274
 8000aa8:	40004800 	.word	0x40004800

08000aac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab2:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab8:	2209      	movs	r2, #9
 8000aba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aca:	2202      	movs	r2, #2
 8000acc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af4:	f001 fcb7 	bl	8002466 <HAL_PCD_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000afe:	f000 f89d 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24000308 	.word	0x24000308
 8000b0c:	40080000 	.word	0x40080000

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4b39      	ldr	r3, [pc, #228]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a30      	ldr	r2, [pc, #192]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <MX_GPIO_Init+0x100>)
 8000be2:	f001 fab7 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000be6:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_GPIO_Init+0x100>)
 8000c00:	f001 f8f8 	bl	8001df4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c04:	bf00      	nop
 8000c06:	3730      	adds	r7, #48	; 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	58020400 	.word	0x58020400

08000c14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback function: Timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d103      	bne.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000c24:	2101      	movs	r1, #1
 8000c26:	4804      	ldr	r0, [pc, #16]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c28:	f001 faad 	bl	8002186 <HAL_GPIO_TogglePin>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24000228 	.word	0x24000228
 8000c38:	58020400 	.word	0x58020400

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_MspInit+0x30>)
 8000c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c54:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x30>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x30>)
 8000c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	58024400 	.word	0x58024400

08000c7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	; 0x38
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a59      	ldr	r2, [pc, #356]	; (8000e00 <HAL_ETH_MspInit+0x184>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	f040 80ab 	bne.w	8000df6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ca0:	4b58      	ldr	r3, [pc, #352]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca6:	4a57      	ldr	r2, [pc, #348]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cb0:	4b54      	ldr	r3, [pc, #336]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000cbe:	4b51      	ldr	r3, [pc, #324]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc4:	4a4f      	ldr	r2, [pc, #316]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000cd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000cdc:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce2:	4a48      	ldr	r2, [pc, #288]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a40      	ldr	r2, [pc, #256]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	4a31      	ldr	r2, [pc, #196]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d72:	2332      	movs	r3, #50	; 0x32
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d82:	230b      	movs	r3, #11
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481e      	ldr	r0, [pc, #120]	; (8000e08 <HAL_ETH_MspInit+0x18c>)
 8000d8e:	f001 f831 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d92:	2386      	movs	r3, #134	; 0x86
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da2:	230b      	movs	r3, #11
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	4817      	ldr	r0, [pc, #92]	; (8000e0c <HAL_ETH_MspInit+0x190>)
 8000dae:	f001 f821 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4810      	ldr	r0, [pc, #64]	; (8000e10 <HAL_ETH_MspInit+0x194>)
 8000dd0:	f001 f810 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000dd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de6:	230b      	movs	r3, #11
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4808      	ldr	r0, [pc, #32]	; (8000e14 <HAL_ETH_MspInit+0x198>)
 8000df2:	f000 ffff 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3738      	adds	r7, #56	; 0x38
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40028000 	.word	0x40028000
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58020800 	.word	0x58020800
 8000e0c:	58020000 	.word	0x58020000
 8000e10:	58020400 	.word	0x58020400
 8000e14:	58021800 	.word	0x58021800

08000e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ba      	sub	sp, #232	; 0xe8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	22c0      	movs	r2, #192	; 0xc0
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f006 f989 	bl	8007150 <memset>
  if(hi2c->Instance==I2C1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a26      	ldr	r2, [pc, #152]	; (8000edc <HAL_I2C_MspInit+0xc4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d145      	bne.n	8000ed4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e48:	f04f 0208 	mov.w	r2, #8
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 fc9a 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e6a:	f7ff fee7 	bl	8000c3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_I2C_MspInit+0xc8>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <HAL_I2C_MspInit+0xc8>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_I2C_MspInit+0xc8>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e8c:	23c0      	movs	r3, #192	; 0xc0
 8000e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e92:	2312      	movs	r3, #18
 8000e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <HAL_I2C_MspInit+0xcc>)
 8000eb2:	f000 ff9f 	bl	8001df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_I2C_MspInit+0xc8>)
 8000eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_I2C_MspInit+0xc8>)
 8000ebe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_I2C_MspInit+0xc8>)
 8000ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	37e8      	adds	r7, #232	; 0xe8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58020400 	.word	0x58020400

08000ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_TIM_Base_MspInit+0x48>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d116      	bne.n	8000f28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_TIM_Base_MspInit+0x4c>)
 8000efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f00:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <HAL_TIM_Base_MspInit+0x4c>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_TIM_Base_MspInit+0x4c>)
 8000f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2075      	movs	r0, #117	; 0x75
 8000f1e:	f000 fb10 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000f22:	2075      	movs	r0, #117	; 0x75
 8000f24:	f000 fb27 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40014400 	.word	0x40014400
 8000f34:	58024400 	.word	0x58024400

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0ba      	sub	sp, #232	; 0xe8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	22c0      	movs	r2, #192	; 0xc0
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 f8f9 	bl	8007150 <memset>
  if(huart->Instance==USART3)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a27      	ldr	r2, [pc, #156]	; (8001000 <HAL_UART_MspInit+0xc8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d146      	bne.n	8000ff6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f68:	f04f 0202 	mov.w	r2, #2
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fc0a 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f8a:	f7ff fe57 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_UART_MspInit+0xcc>)
 8000f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <HAL_UART_MspInit+0xcc>)
 8000f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_UART_MspInit+0xcc>)
 8000fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0xcc>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_UART_MspInit+0xcc>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0xcc>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_UART_MspInit+0xd0>)
 8000ff2:	f000 feff 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	37e8      	adds	r7, #232	; 0xe8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004800 	.word	0x40004800
 8001004:	58024400 	.word	0x58024400
 8001008:	58020c00 	.word	0x58020c00

0800100c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0ba      	sub	sp, #232	; 0xe8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	22c0      	movs	r2, #192	; 0xc0
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f006 f88f 	bl	8007150 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a38      	ldr	r2, [pc, #224]	; (8001118 <HAL_PCD_MspInit+0x10c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d169      	bne.n	8001110 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800103c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800104c:	2312      	movs	r3, #18
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001054:	2303      	movs	r3, #3
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001058:	2302      	movs	r3, #2
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800105c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001062:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001066:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001068:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800106c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4618      	mov	r0, r3
 8001076:	f002 fb8f 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001080:	f7ff fddc 	bl	8000c3c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001084:	f001 fb92 	bl	80027ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <HAL_PCD_MspInit+0x110>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <HAL_PCD_MspInit+0x110>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_PCD_MspInit+0x110>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010a6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010c0:	230a      	movs	r3, #10
 80010c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4814      	ldr	r0, [pc, #80]	; (8001120 <HAL_PCD_MspInit+0x114>)
 80010ce:	f000 fe91 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ea:	4619      	mov	r1, r3
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <HAL_PCD_MspInit+0x114>)
 80010ee:	f000 fe81 	bl	8001df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_PCD_MspInit+0x110>)
 80010f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010f8:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_PCD_MspInit+0x110>)
 80010fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_PCD_MspInit+0x110>)
 8001104:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	37e8      	adds	r7, #232	; 0xe8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40080000 	.word	0x40080000
 800111c:	58024400 	.word	0x58024400
 8001120:	58020000 	.word	0x58020000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 f8a8 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM16_IRQHandler+0x10>)
 800117e:	f004 fa07 	bl	8005590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	24000228 	.word	0x24000228

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001190:	f7ff fa20 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001196:	490d      	ldr	r1, [pc, #52]	; (80011cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ac:	4c0a      	ldr	r4, [pc, #40]	; (80011d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f005 ffd1 	bl	8007160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fa9f 	bl	8000700 <main>
  bx  lr
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011cc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80011d0:	08007208 	.word	0x08007208
  ldr r2, =_sbss
 80011d4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80011d8:	24000820 	.word	0x24000820

080011dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC3_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e6:	2003      	movs	r0, #3
 80011e8:	f000 f9a0 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011ec:	f002 f8fe 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_Init+0x68>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	4913      	ldr	r1, [pc, #76]	; (800124c <HAL_Init+0x6c>)
 80011fe:	5ccb      	ldrb	r3, [r1, r3]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_Init+0x68>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_Init+0x6c>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_Init+0x70>)
 8001222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_Init+0x74>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f814 	bl	8001258 <HAL_InitTick>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e002      	b.n	8001240 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800123a:	f7ff fd05 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	58024400 	.word	0x58024400
 800124c:	080071c0 	.word	0x080071c0
 8001250:	24000004 	.word	0x24000004
 8001254:	24000000 	.word	0x24000000

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_InitTick+0x60>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e021      	b.n	80012b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_InitTick+0x64>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_InitTick+0x60>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f985 	bl	8001592 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f94f 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x68>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2400000c 	.word	0x2400000c
 80012bc:	24000000 	.word	0x24000000
 80012c0:	24000008 	.word	0x24000008

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2400000c 	.word	0x2400000c
 80012e8:	2400081c 	.word	0x2400081c

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2400081c 	.word	0x2400081c

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2400000c 	.word	0x2400000c

0800134c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_GetREVID+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0c1b      	lsrs	r3, r3, #16
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	5c001000 	.word	0x5c001000

08001364 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	58000400 	.word	0x58000400

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	05fa0000 	.word	0x05fa0000

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff40 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff90 	bl	8001480 <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5f 	bl	800142c <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff33 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffa4 	bl	80014e8 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0cf      	b.n	800175e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d106      	bne.n	80015d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2223      	movs	r2, #35	; 0x23
 80015cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fb53 	bl	8000c7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	4b64      	ldr	r3, [pc, #400]	; (8001768 <HAL_ETH_Init+0x1bc>)
 80015d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015dc:	4a62      	ldr	r2, [pc, #392]	; (8001768 <HAL_ETH_Init+0x1bc>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015e6:	4b60      	ldr	r3, [pc, #384]	; (8001768 <HAL_ETH_Init+0x1bc>)
 80015e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7a1b      	ldrb	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff feb1 	bl	8001364 <HAL_SYSCFG_ETHInterfaceSelect>
 8001602:	e003      	b.n	800160c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001604:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001608:	f7ff feac 	bl	8001364 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800160c:	4b57      	ldr	r3, [pc, #348]	; (800176c <HAL_ETH_Init+0x1c0>)
 800160e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001626:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001628:	f7ff fe60 	bl	80012ec <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800162e:	e011      	b.n	8001654 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001630:	f7ff fe5c 	bl	80012ec <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800163e:	d909      	bls.n	8001654 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2204      	movs	r2, #4
 8001644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	22e0      	movs	r2, #224	; 0xe0
 800164c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e084      	b.n	800175e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1e4      	bne.n	8001630 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f886 	bl	8001778 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800166c:	f002 f838 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8001670:	4603      	mov	r3, r0
 8001672:	4a3f      	ldr	r2, [pc, #252]	; (8001770 <HAL_ETH_Init+0x1c4>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	0c9a      	lsrs	r2, r3, #18
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3a01      	subs	r2, #1
 8001680:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fa71 	bl	8001b6c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001692:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001696:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016a6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	22e0      	movs	r2, #224	; 0xe0
 80016c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e049      	b.n	800175e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_ETH_Init+0x1c8>)
 80016d8:	4013      	ands	r3, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6952      	ldr	r2, [r2, #20]
 80016de:	0051      	lsls	r1, r2, #1
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ea:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 fad9 	bl	8001ca6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fb1f 	bl	8001d38 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	3305      	adds	r3, #5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	021a      	lsls	r2, r3, #8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	3304      	adds	r3, #4
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	3303      	adds	r3, #3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	061a      	lsls	r2, r3, #24
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	3302      	adds	r3, #2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	3301      	adds	r3, #1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001738:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001746:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001748:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2210      	movs	r2, #16
 8001758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	58024400 	.word	0x58024400
 800176c:	58000400 	.word	0x58000400
 8001770:	431bde83 	.word	0x431bde83
 8001774:	ffff8001 	.word	0xffff8001

08001778 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001788:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001790:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001792:	f001 ffa5 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8001796:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d908      	bls.n	80017b2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d804      	bhi.n	80017b2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e027      	b.n	8001802 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4a18      	ldr	r2, [pc, #96]	; (8001818 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d908      	bls.n	80017cc <HAL_ETH_SetMDIOClockRange+0x54>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d204      	bcs.n	80017cc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e01a      	b.n	8001802 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d303      	bcc.n	80017dc <HAL_ETH_SetMDIOClockRange+0x64>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d911      	bls.n	8001800 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d908      	bls.n	80017f6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <HAL_ETH_SetMDIOClockRange+0xac>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d804      	bhi.n	80017f6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e005      	b.n	8001802 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	e000      	b.n	8001802 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001800:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	01312cff 	.word	0x01312cff
 8001818:	02160ebf 	.word	0x02160ebf
 800181c:	03938700 	.word	0x03938700
 8001820:	05f5e0ff 	.word	0x05f5e0ff
 8001824:	08f0d17f 	.word	0x08f0d17f

08001828 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800183a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	791b      	ldrb	r3, [r3, #4]
 8001840:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001842:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	7b1b      	ldrb	r3, [r3, #12]
 8001848:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800184a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	7b5b      	ldrb	r3, [r3, #13]
 8001850:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	7b9b      	ldrb	r3, [r3, #14]
 8001858:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800185a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	7bdb      	ldrb	r3, [r3, #15]
 8001860:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001862:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	7c12      	ldrb	r2, [r2, #16]
 8001868:	2a00      	cmp	r2, #0
 800186a:	d102      	bne.n	8001872 <ETH_SetMACConfig+0x4a>
 800186c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001870:	e000      	b.n	8001874 <ETH_SetMACConfig+0x4c>
 8001872:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001874:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	7c52      	ldrb	r2, [r2, #17]
 800187a:	2a00      	cmp	r2, #0
 800187c:	d102      	bne.n	8001884 <ETH_SetMACConfig+0x5c>
 800187e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001882:	e000      	b.n	8001886 <ETH_SetMACConfig+0x5e>
 8001884:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001886:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	7c9b      	ldrb	r3, [r3, #18]
 800188c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800188e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001894:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800189a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	7f1b      	ldrb	r3, [r3, #28]
 80018a0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	7f5b      	ldrb	r3, [r3, #29]
 80018a8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	7f92      	ldrb	r2, [r2, #30]
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	d102      	bne.n	80018ba <ETH_SetMACConfig+0x92>
 80018b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b8:	e000      	b.n	80018bc <ETH_SetMACConfig+0x94>
 80018ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	7fdb      	ldrb	r3, [r3, #31]
 80018c2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	d102      	bne.n	80018d6 <ETH_SetMACConfig+0xae>
 80018d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d4:	e000      	b.n	80018d8 <ETH_SetMACConfig+0xb0>
 80018d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018d8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018e6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018e8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <ETH_SetMACConfig+0x22c>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	430b      	orrs	r3, r1
 8001904:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001912:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001914:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800191e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001926:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001928:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001930:	2a00      	cmp	r2, #0
 8001932:	d102      	bne.n	800193a <ETH_SetMACConfig+0x112>
 8001934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001938:	e000      	b.n	800193c <ETH_SetMACConfig+0x114>
 800193a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800193c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <ETH_SetMACConfig+0x230>)
 800194e:	4013      	ands	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	68f9      	ldr	r1, [r7, #12]
 8001956:	430b      	orrs	r3, r1
 8001958:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001960:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <ETH_SetMACConfig+0x234>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	430b      	orrs	r3, r1
 800197c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001984:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800198a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001992:	2a00      	cmp	r2, #0
 8001994:	d101      	bne.n	800199a <ETH_SetMACConfig+0x172>
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	e000      	b.n	800199c <ETH_SetMACConfig+0x174>
 800199a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800199c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019ae:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019da:	f023 0103 	bic.w	r1, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80019f2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d101      	bne.n	8001a16 <ETH_SetMACConfig+0x1ee>
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	e000      	b.n	8001a18 <ETH_SetMACConfig+0x1f0>
 8001a16:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a18:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a20:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a2a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a38:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	00048083 	.word	0x00048083
 8001a58:	c0f88000 	.word	0xc0f88000
 8001a5c:	fffffef0 	.word	0xfffffef0

08001a60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <ETH_SetDMAConfig+0xf8>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	6811      	ldr	r1, [r2, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a86:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a92:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	7b1b      	ldrb	r3, [r3, #12]
 8001a98:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <ETH_SetDMAConfig+0xfc>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	68f9      	ldr	r1, [r7, #12]
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	7b5b      	ldrb	r3, [r3, #13]
 8001abe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <ETH_SetDMAConfig+0x100>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	68f9      	ldr	r1, [r7, #12]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7d1b      	ldrb	r3, [r3, #20]
 8001af0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001af2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7f5b      	ldrb	r3, [r3, #29]
 8001af8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <ETH_SetDMAConfig+0x104>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b1a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7f1b      	ldrb	r3, [r3, #28]
 8001b22:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b34:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <ETH_SetDMAConfig+0x108>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b48:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	ffff87fd 	.word	0xffff87fd
 8001b5c:	ffff2ffe 	.word	0xffff2ffe
 8001b60:	fffec000 	.word	0xfffec000
 8001b64:	ffc0efef 	.word	0xffc0efef
 8001b68:	7fc0ffff 	.word	0x7fc0ffff

08001b6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0a4      	sub	sp, #144	; 0x90
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bac:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001bc4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bc8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001be6:	2300      	movs	r3, #0
 8001be8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c04:	2320      	movs	r3, #32
 8001c06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c16:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c20:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c46:	2300      	movs	r3, #0
 8001c48:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c54:	4619      	mov	r1, r3
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fde6 	bl	8001828 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c60:	2301      	movs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c8c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fee1 	bl	8001a60 <ETH_SetDMAConfig>
}
 8001c9e:	bf00      	nop
 8001ca0:	3790      	adds	r7, #144	; 0x90
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e01d      	b.n	8001cf0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68d9      	ldr	r1, [r3, #12]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	3206      	adds	r2, #6
 8001ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3301      	adds	r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d9de      	bls.n	8001cb4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d04:	461a      	mov	r2, r3
 8001d06:	2303      	movs	r3, #3
 8001d08:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d18:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d28:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e023      	b.n	8001d8e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6919      	ldr	r1, [r3, #16]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	3212      	adds	r2, #18
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d9d8      	bls.n	8001d46 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dce:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e02:	4b89      	ldr	r3, [pc, #548]	; (8002028 <HAL_GPIO_Init+0x234>)
 8001e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e06:	e194      	b.n	8002132 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8186 	beq.w	800212c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d005      	beq.n	8001e38 <HAL_GPIO_Init+0x44>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d130      	bne.n	8001e9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 0201 	and.w	r2, r3, #1
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d017      	beq.n	8001ed6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d123      	bne.n	8001f2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	69b9      	ldr	r1, [r7, #24]
 8001f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0203 	and.w	r2, r3, #3
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80e0 	beq.w	800212c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_GPIO_Init+0x238>)
 8001f6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f72:	4a2e      	ldr	r2, [pc, #184]	; (800202c <HAL_GPIO_Init+0x238>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_GPIO_Init+0x238>)
 8001f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8a:	4a29      	ldr	r2, [pc, #164]	; (8002030 <HAL_GPIO_Init+0x23c>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a20      	ldr	r2, [pc, #128]	; (8002034 <HAL_GPIO_Init+0x240>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d052      	beq.n	800205c <HAL_GPIO_Init+0x268>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_GPIO_Init+0x244>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d031      	beq.n	8002022 <HAL_GPIO_Init+0x22e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_GPIO_Init+0x248>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02b      	beq.n	800201e <HAL_GPIO_Init+0x22a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_GPIO_Init+0x24c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d025      	beq.n	800201a <HAL_GPIO_Init+0x226>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <HAL_GPIO_Init+0x250>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01f      	beq.n	8002016 <HAL_GPIO_Init+0x222>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_GPIO_Init+0x254>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d019      	beq.n	8002012 <HAL_GPIO_Init+0x21e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_GPIO_Init+0x258>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0x21a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_GPIO_Init+0x25c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00d      	beq.n	800200a <HAL_GPIO_Init+0x216>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_GPIO_Init+0x260>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <HAL_GPIO_Init+0x212>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_GPIO_Init+0x264>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_GPIO_Init+0x20e>
 8001ffe:	2309      	movs	r3, #9
 8002000:	e02d      	b.n	800205e <HAL_GPIO_Init+0x26a>
 8002002:	230a      	movs	r3, #10
 8002004:	e02b      	b.n	800205e <HAL_GPIO_Init+0x26a>
 8002006:	2308      	movs	r3, #8
 8002008:	e029      	b.n	800205e <HAL_GPIO_Init+0x26a>
 800200a:	2307      	movs	r3, #7
 800200c:	e027      	b.n	800205e <HAL_GPIO_Init+0x26a>
 800200e:	2306      	movs	r3, #6
 8002010:	e025      	b.n	800205e <HAL_GPIO_Init+0x26a>
 8002012:	2305      	movs	r3, #5
 8002014:	e023      	b.n	800205e <HAL_GPIO_Init+0x26a>
 8002016:	2304      	movs	r3, #4
 8002018:	e021      	b.n	800205e <HAL_GPIO_Init+0x26a>
 800201a:	2303      	movs	r3, #3
 800201c:	e01f      	b.n	800205e <HAL_GPIO_Init+0x26a>
 800201e:	2302      	movs	r3, #2
 8002020:	e01d      	b.n	800205e <HAL_GPIO_Init+0x26a>
 8002022:	2301      	movs	r3, #1
 8002024:	e01b      	b.n	800205e <HAL_GPIO_Init+0x26a>
 8002026:	bf00      	nop
 8002028:	58000080 	.word	0x58000080
 800202c:	58024400 	.word	0x58024400
 8002030:	58000400 	.word	0x58000400
 8002034:	58020000 	.word	0x58020000
 8002038:	58020400 	.word	0x58020400
 800203c:	58020800 	.word	0x58020800
 8002040:	58020c00 	.word	0x58020c00
 8002044:	58021000 	.word	0x58021000
 8002048:	58021400 	.word	0x58021400
 800204c:	58021800 	.word	0x58021800
 8002050:	58021c00 	.word	0x58021c00
 8002054:	58022000 	.word	0x58022000
 8002058:	58022400 	.word	0x58022400
 800205c:	2300      	movs	r3, #0
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	f002 0203 	and.w	r2, r2, #3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4093      	lsls	r3, r2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206e:	4938      	ldr	r1, [pc, #224]	; (8002150 <HAL_GPIO_Init+0x35c>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	3301      	adds	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f ae63 	bne.w	8001e08 <HAL_GPIO_Init+0x14>
  }
}
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	3724      	adds	r7, #36	; 0x24
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	58000400 	.word	0x58000400

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002198:	887a      	ldrh	r2, [r7, #2]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	041a      	lsls	r2, r3, #16
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	400b      	ands	r3, r1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80021c4:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_HSEM_FastTake+0x2c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3320      	adds	r3, #32
 80021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_HSEM_FastTake+0x30>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	58026400 	.word	0x58026400
 80021ec:	80000300 	.word	0x80000300

080021f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021fa:	4906      	ldr	r1, [pc, #24]	; (8002214 <HAL_HSEM_Release+0x24>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	58026400 	.word	0x58026400

08002218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e07f      	b.n	800232a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fdea 	bl	8000e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2224      	movs	r2, #36	; 0x24
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002268:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002278:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d107      	bne.n	8002292 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e006      	b.n	80022a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800229e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d104      	bne.n	80022b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_I2C_Init+0x11c>)
 80022be:	430b      	orrs	r3, r1
 80022c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69d9      	ldr	r1, [r3, #28]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	02008000 	.word	0x02008000

08002338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b20      	cmp	r3, #32
 800234c:	d138      	bne.n	80023c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002358:	2302      	movs	r3, #2
 800235a:	e032      	b.n	80023c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	; 0x24
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800238a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6819      	ldr	r1, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d139      	bne.n	8002458 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e033      	b.n	800245a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2224      	movs	r2, #36	; 0x24
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002468:	b08f      	sub	sp, #60	; 0x3c
 800246a:	af0a      	add	r7, sp, #40	; 0x28
 800246c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e116      	b.n	80026a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe fdba 	bl	800100c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2203      	movs	r2, #3
 800249c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 fbae 	bl	8006c18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	687e      	ldr	r6, [r7, #4]
 80024c4:	466d      	mov	r5, sp
 80024c6:	f106 0410 	add.w	r4, r6, #16
 80024ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024da:	1d33      	adds	r3, r6, #4
 80024dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024de:	6838      	ldr	r0, [r7, #0]
 80024e0:	f004 fb2c 	bl	8006b3c <USB_CoreInit>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0d7      	b.n	80026a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 fb9c 	bl	8006c3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e04a      	b.n	800259e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	333d      	adds	r3, #61	; 0x3d
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	333c      	adds	r3, #60	; 0x3c
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	b298      	uxth	r0, r3
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3356      	adds	r3, #86	; 0x56
 8002544:	4602      	mov	r2, r0
 8002546:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	3340      	adds	r3, #64	; 0x40
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	3344      	adds	r3, #68	; 0x44
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3348      	adds	r3, #72	; 0x48
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	334c      	adds	r3, #76	; 0x4c
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	3301      	adds	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3af      	bcc.n	8002508 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	e044      	b.n	8002638 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	3301      	adds	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	429a      	cmp	r2, r3
 8002640:	d3b5      	bcc.n	80025ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	687e      	ldr	r6, [r7, #4]
 800264a:	466d      	mov	r5, sp
 800264c:	f106 0410 	add.w	r4, r6, #16
 8002650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002658:	e894 0003 	ldmia.w	r4, {r0, r1}
 800265c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002660:	1d33      	adds	r3, r6, #4
 8002662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002664:	6838      	ldr	r0, [r7, #0]
 8002666:	f004 fb35 	bl	8006cd4 <USB_DevInit>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e014      	b.n	80026a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f80b 	bl	80026b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 fcf3 	bl	800708a <USB_DevDisconnect>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080026b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	10000003 	.word	0x10000003

080026f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002700:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	2b06      	cmp	r3, #6
 800270a:	d00a      	beq.n	8002722 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e040      	b.n	80027a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e03e      	b.n	80027a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800272a:	491f      	ldr	r1, [pc, #124]	; (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4313      	orrs	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002732:	f7fe fddb 	bl	80012ec <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002738:	e009      	b.n	800274e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800273a:	f7fe fdd7 	bl	80012ec <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002748:	d901      	bls.n	800274e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e028      	b.n	80027a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275a:	d1ee      	bne.n	800273a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b1e      	cmp	r3, #30
 8002760:	d008      	beq.n	8002774 <HAL_PWREx_ConfigSupply+0x7c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b2e      	cmp	r3, #46	; 0x2e
 8002766:	d005      	beq.n	8002774 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b1d      	cmp	r3, #29
 800276c:	d002      	beq.n	8002774 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b2d      	cmp	r3, #45	; 0x2d
 8002772:	d114      	bne.n	800279e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002774:	f7fe fdba 	bl	80012ec <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800277a:	e009      	b.n	8002790 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800277c:	f7fe fdb6 	bl	80012ec <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278a:	d901      	bls.n	8002790 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e007      	b.n	80027a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d1ee      	bne.n	800277c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	58024800 	.word	0x58024800

080027ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	58024800 	.word	0x58024800

080027cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	; 0x30
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f000 bc48 	b.w	8003070 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8088 	beq.w	80028fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ee:	4b99      	ldr	r3, [pc, #612]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027f8:	4b96      	ldr	r3, [pc, #600]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	2b10      	cmp	r3, #16
 8002802:	d007      	beq.n	8002814 <HAL_RCC_OscConfig+0x48>
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	2b18      	cmp	r3, #24
 8002808:	d111      	bne.n	800282e <HAL_RCC_OscConfig+0x62>
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d10c      	bne.n	800282e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	4b8f      	ldr	r3, [pc, #572]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d06d      	beq.n	80028fc <HAL_RCC_OscConfig+0x130>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d169      	bne.n	80028fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f000 bc21 	b.w	8003070 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x7a>
 8002838:	4b86      	ldr	r3, [pc, #536]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a85      	ldr	r2, [pc, #532]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e02e      	b.n	80028a4 <HAL_RCC_OscConfig+0xd8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x9c>
 800284e:	4b81      	ldr	r3, [pc, #516]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7d      	ldr	r2, [pc, #500]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xd8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0xc0>
 8002872:	4b78      	ldr	r3, [pc, #480]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a77      	ldr	r2, [pc, #476]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a74      	ldr	r2, [pc, #464]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xd8>
 800288c:	4b71      	ldr	r3, [pc, #452]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a70      	ldr	r2, [pc, #448]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b6e      	ldr	r3, [pc, #440]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6d      	ldr	r2, [pc, #436]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fd1e 	bl	80012ec <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fd1a 	bl	80012ec <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e3d4      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028c6:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe8>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fd0a 	bl	80012ec <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fd06 	bl	80012ec <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e3c0      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ee:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x110>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80ca 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290c:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002914:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002916:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_RCC_OscConfig+0x166>
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2b18      	cmp	r3, #24
 8002926:	d156      	bne.n	80029d6 <HAL_RCC_OscConfig+0x20a>
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d151      	bne.n	80029d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002932:	4b48      	ldr	r3, [pc, #288]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x17e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e392      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800294a:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0219 	bic.w	r2, r3, #25
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	493f      	ldr	r1, [pc, #252]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fcc6 	bl	80012ec <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe fcc2 	bl	80012ec <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e37c      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002982:	f7fe fce3 	bl	800134c <HAL_GetREVID>
 8002986:	4603      	mov	r3, r0
 8002988:	f241 0203 	movw	r2, #4099	; 0x1003
 800298c:	4293      	cmp	r3, r2
 800298e:	d817      	bhi.n	80029c0 <HAL_RCC_OscConfig+0x1f4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d108      	bne.n	80029aa <HAL_RCC_OscConfig+0x1de>
 8002998:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a8:	e07a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	031b      	lsls	r3, r3, #12
 80029b8:	4926      	ldr	r1, [pc, #152]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029be:	e06f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	4921      	ldr	r1, [pc, #132]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d4:	e064      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d047      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029de:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0219 	bic.w	r2, r3, #25
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	491a      	ldr	r1, [pc, #104]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fc7c 	bl	80012ec <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7fe fc78 	bl	80012ec <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e332      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	f7fe fc99 	bl	800134c <HAL_GetREVID>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d819      	bhi.n	8002a58 <HAL_RCC_OscConfig+0x28c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d108      	bne.n	8002a3e <HAL_RCC_OscConfig+0x272>
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a34:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3a:	6053      	str	r3, [r2, #4]
 8002a3c:	e030      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	031b      	lsls	r3, r3, #12
 8002a4c:	4901      	ldr	r1, [pc, #4]	; (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
 8002a52:	e025      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
 8002a54:	58024400 	.word	0x58024400
 8002a58:	4b9a      	ldr	r3, [pc, #616]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	061b      	lsls	r3, r3, #24
 8002a66:	4997      	ldr	r1, [pc, #604]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
 8002a6c:	e018      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6e:	4b95      	ldr	r3, [pc, #596]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a94      	ldr	r2, [pc, #592]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fc37 	bl	80012ec <HAL_GetTick>
 8002a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a82:	f7fe fc33 	bl	80012ec <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e2ed      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a94:	4b8b      	ldr	r3, [pc, #556]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a9 	beq.w	8002c00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	4b85      	ldr	r3, [pc, #532]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ab8:	4b82      	ldr	r3, [pc, #520]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d007      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x308>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b18      	cmp	r3, #24
 8002ac8:	d13a      	bne.n	8002b40 <HAL_RCC_OscConfig+0x374>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d135      	bne.n	8002b40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ad4:	4b7b      	ldr	r3, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_OscConfig+0x320>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e2c1      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aec:	f7fe fc2e 	bl	800134c <HAL_GetREVID>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d817      	bhi.n	8002b2a <HAL_RCC_OscConfig+0x35e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d108      	bne.n	8002b14 <HAL_RCC_OscConfig+0x348>
 8002b02:	4b70      	ldr	r3, [pc, #448]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b0a:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b12:	e075      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b14:	4b6b      	ldr	r3, [pc, #428]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	069b      	lsls	r3, r3, #26
 8002b22:	4968      	ldr	r1, [pc, #416]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b28:	e06a      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b2a:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	061b      	lsls	r3, r3, #24
 8002b38:	4962      	ldr	r1, [pc, #392]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b3e:	e05f      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d042      	beq.n	8002bce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b48:	4b5e      	ldr	r3, [pc, #376]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5d      	ldr	r2, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fbca 	bl	80012ec <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fbc6 	bl	80012ec <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e280      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b6e:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b7a:	f7fe fbe7 	bl	800134c <HAL_GetREVID>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d817      	bhi.n	8002bb8 <HAL_RCC_OscConfig+0x3ec>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d108      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3d6>
 8002b90:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b98:	4a4a      	ldr	r2, [pc, #296]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b9e:	6053      	str	r3, [r2, #4]
 8002ba0:	e02e      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
 8002ba2:	4b48      	ldr	r3, [pc, #288]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	4944      	ldr	r1, [pc, #272]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
 8002bb6:	e023      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
 8002bb8:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	493f      	ldr	r1, [pc, #252]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
 8002bcc:	e018      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3c      	ldr	r2, [pc, #240]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe fb87 	bl	80012ec <HAL_GetTick>
 8002bde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002be2:	f7fe fb83 	bl	80012ec <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e23d      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bf4:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d036      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d019      	beq.n	8002c48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fb64 	bl	80012ec <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe fb60 	bl	80012ec <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e21a      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x45c>
 8002c46:	e018      	b.n	8002c7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fb4a 	bl	80012ec <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fb46 	bl	80012ec <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e200      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d039      	beq.n	8002cfa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fb27 	bl	80012ec <HAL_GetTick>
 8002c9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca2:	f7fe fb23 	bl	80012ec <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1dd      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x4d6>
 8002cc0:	e01b      	b.n	8002cfa <HAL_RCC_OscConfig+0x52e>
 8002cc2:	bf00      	nop
 8002cc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cc8:	4b9b      	ldr	r3, [pc, #620]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a9a      	ldr	r2, [pc, #616]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002cce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fb0a 	bl	80012ec <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cdc:	f7fe fb06 	bl	80012ec <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e1c0      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cee:	4b92      	ldr	r3, [pc, #584]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8081 	beq.w	8002e0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d08:	4b8c      	ldr	r3, [pc, #560]	; (8002f3c <HAL_RCC_OscConfig+0x770>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a8b      	ldr	r2, [pc, #556]	; (8002f3c <HAL_RCC_OscConfig+0x770>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d14:	f7fe faea 	bl	80012ec <HAL_GetTick>
 8002d18:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1c:	f7fe fae6 	bl	80012ec <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1a0      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2e:	4b83      	ldr	r3, [pc, #524]	; (8002f3c <HAL_RCC_OscConfig+0x770>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d106      	bne.n	8002d50 <HAL_RCC_OscConfig+0x584>
 8002d42:	4b7d      	ldr	r3, [pc, #500]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a7c      	ldr	r2, [pc, #496]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	e02d      	b.n	8002dac <HAL_RCC_OscConfig+0x5e0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5a6>
 8002d58:	4b77      	ldr	r3, [pc, #476]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a76      	ldr	r2, [pc, #472]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	4b74      	ldr	r3, [pc, #464]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a73      	ldr	r2, [pc, #460]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d6a:	f023 0304 	bic.w	r3, r3, #4
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	e01c      	b.n	8002dac <HAL_RCC_OscConfig+0x5e0>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c8>
 8002d7a:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a6b      	ldr	r2, [pc, #428]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0x5e0>
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a67      	ldr	r2, [pc, #412]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002da0:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4a64      	ldr	r2, [pc, #400]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	f023 0304 	bic.w	r3, r3, #4
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d015      	beq.n	8002de0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7fe fa9a 	bl	80012ec <HAL_GetTick>
 8002db8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7fe fa96 	bl	80012ec <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e14e      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd2:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ee      	beq.n	8002dbc <HAL_RCC_OscConfig+0x5f0>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe fa84 	bl	80012ec <HAL_GetTick>
 8002de4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fe fa80 	bl	80012ec <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e138      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1ee      	bne.n	8002de8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 812d 	beq.w	800306e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e14:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e1c:	2b18      	cmp	r3, #24
 8002e1e:	f000 80bd 	beq.w	8002f9c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	f040 809e 	bne.w	8002f68 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a41      	ldr	r2, [pc, #260]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe fa58 	bl	80012ec <HAL_GetTick>
 8002e3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe fa54 	bl	80012ec <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e10e      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5e:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCC_OscConfig+0x774>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	430a      	orrs	r2, r1
 8002e72:	4931      	ldr	r1, [pc, #196]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	628b      	str	r3, [r1, #40]	; 0x28
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	3b01      	subs	r3, #1
 8002e88:	025b      	lsls	r3, r3, #9
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	3b01      	subs	r3, #1
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	061b      	lsls	r3, r3, #24
 8002ea4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ea8:	4923      	ldr	r1, [pc, #140]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002eba:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_RCC_OscConfig+0x778>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ec6:	00d2      	lsls	r2, r2, #3
 8002ec8:	491b      	ldr	r1, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f023 020c 	bic.w	r2, r3, #12
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4917      	ldr	r1, [pc, #92]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ee0:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f023 0202 	bic.w	r2, r3, #2
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	4912      	ldr	r1, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe f9dd 	bl	80012ec <HAL_GetTick>
 8002f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f34:	e011      	b.n	8002f5a <HAL_RCC_OscConfig+0x78e>
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	58024800 	.word	0x58024800
 8002f40:	fffffc0c 	.word	0xfffffc0c
 8002f44:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe f9d0 	bl	80012ec <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e08a      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x77c>
 8002f66:	e082      	b.n	800306e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a42      	ldr	r2, [pc, #264]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f9ba 	bl	80012ec <HAL_GetTick>
 8002f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe f9b6 	bl	80012ec <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e070      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x7b0>
 8002f9a:	e068      	b.n	800306e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fa2:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d031      	beq.n	8003014 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0203 	and.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d12a      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d122      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d11a      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	0a5b      	lsrs	r3, r3, #9
 8002fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d111      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d108      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	0e1b      	lsrs	r3, r3, #24
 8003006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e02b      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003022:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	d01f      	beq.n	800306e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800303a:	f7fe f957 	bl	80012ec <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003040:	bf00      	nop
 8003042:	f7fe f953 	bl	80012ec <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	4293      	cmp	r3, r2
 800304c:	d0f9      	beq.n	8003042 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_OscConfig+0x8b0>)
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800305a:	00d2      	lsls	r2, r2, #3
 800305c:	4906      	ldr	r1, [pc, #24]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 800305e:	4313      	orrs	r3, r2
 8003060:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3730      	adds	r7, #48	; 0x30
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	58024400 	.word	0x58024400
 800307c:	ffff0007 	.word	0xffff0007

08003080 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e19c      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b8a      	ldr	r3, [pc, #552]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b87      	ldr	r3, [pc, #540]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 020f 	bic.w	r2, r3, #15
 80030aa:	4985      	ldr	r1, [pc, #532]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b83      	ldr	r3, [pc, #524]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e184      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	4b7b      	ldr	r3, [pc, #492]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030dc:	429a      	cmp	r2, r3
 80030de:	d908      	bls.n	80030f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030e0:	4b78      	ldr	r3, [pc, #480]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	4975      	ldr	r1, [pc, #468]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	4b70      	ldr	r3, [pc, #448]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800310a:	429a      	cmp	r2, r3
 800310c:	d908      	bls.n	8003120 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800310e:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	496a      	ldr	r1, [pc, #424]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800311c:	4313      	orrs	r3, r2
 800311e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003138:	429a      	cmp	r2, r3
 800313a:	d908      	bls.n	800314e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	495e      	ldr	r1, [pc, #376]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800314a:	4313      	orrs	r3, r2
 800314c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	4b59      	ldr	r3, [pc, #356]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003166:	429a      	cmp	r2, r3
 8003168:	d908      	bls.n	800317c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4953      	ldr	r1, [pc, #332]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003178:	4313      	orrs	r3, r2
 800317a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	429a      	cmp	r2, r3
 8003196:	d908      	bls.n	80031aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f023 020f 	bic.w	r2, r3, #15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4947      	ldr	r1, [pc, #284]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d055      	beq.n	8003262 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4940      	ldr	r1, [pc, #256]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d0:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d121      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0f6      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d115      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0ea      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003200:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0de      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003210:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0d6      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f023 0207 	bic.w	r2, r3, #7
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4925      	ldr	r1, [pc, #148]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800322e:	4313      	orrs	r3, r2
 8003230:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003232:	f7fe f85b 	bl	80012ec <HAL_GetTick>
 8003236:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003238:	e00a      	b.n	8003250 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323a:	f7fe f857 	bl	80012ec <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0be      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003250:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	429a      	cmp	r2, r3
 8003260:	d1eb      	bne.n	800323a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d010      	beq.n	8003290 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	429a      	cmp	r2, r3
 800327c:	d208      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f023 020f 	bic.w	r2, r3, #15
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	490e      	ldr	r1, [pc, #56]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800328c:	4313      	orrs	r3, r2
 800328e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d214      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 020f 	bic.w	r2, r3, #15
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e086      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
 80032c0:	52002000 	.word	0x52002000
 80032c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d208      	bcs.n	80032f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032e4:	4b3c      	ldr	r3, [pc, #240]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	4939      	ldr	r1, [pc, #228]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800330e:	429a      	cmp	r2, r3
 8003310:	d208      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003312:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	492e      	ldr	r1, [pc, #184]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003320:	4313      	orrs	r3, r2
 8003322:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	d010      	beq.n	8003352 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800333c:	429a      	cmp	r2, r3
 800333e:	d208      	bcs.n	8003352 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4922      	ldr	r1, [pc, #136]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 800334e:	4313      	orrs	r3, r2
 8003350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800336a:	429a      	cmp	r2, r3
 800336c:	d208      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4917      	ldr	r1, [pc, #92]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 800337c:	4313      	orrs	r3, r2
 800337e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003380:	f000 f834 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	4912      	ldr	r1, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x35c>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <HAL_RCC_ClockConfig+0x35c>)
 80033a8:	5cd3      	ldrb	r3, [r2, r3]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
 80033b4:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x360>)
 80033b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b8:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <HAL_RCC_ClockConfig+0x364>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x368>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd ff48 	bl	8001258 <HAL_InitTick>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	58024400 	.word	0x58024400
 80033dc:	080071c0 	.word	0x080071c0
 80033e0:	24000004 	.word	0x24000004
 80033e4:	24000000 	.word	0x24000000
 80033e8:	24000008 	.word	0x24000008

080033ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f2:	4bb3      	ldr	r3, [pc, #716]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033fa:	2b18      	cmp	r3, #24
 80033fc:	f200 8155 	bhi.w	80036aa <HAL_RCC_GetSysClockFreq+0x2be>
 8003400:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	0800346d 	.word	0x0800346d
 800340c:	080036ab 	.word	0x080036ab
 8003410:	080036ab 	.word	0x080036ab
 8003414:	080036ab 	.word	0x080036ab
 8003418:	080036ab 	.word	0x080036ab
 800341c:	080036ab 	.word	0x080036ab
 8003420:	080036ab 	.word	0x080036ab
 8003424:	080036ab 	.word	0x080036ab
 8003428:	08003493 	.word	0x08003493
 800342c:	080036ab 	.word	0x080036ab
 8003430:	080036ab 	.word	0x080036ab
 8003434:	080036ab 	.word	0x080036ab
 8003438:	080036ab 	.word	0x080036ab
 800343c:	080036ab 	.word	0x080036ab
 8003440:	080036ab 	.word	0x080036ab
 8003444:	080036ab 	.word	0x080036ab
 8003448:	08003499 	.word	0x08003499
 800344c:	080036ab 	.word	0x080036ab
 8003450:	080036ab 	.word	0x080036ab
 8003454:	080036ab 	.word	0x080036ab
 8003458:	080036ab 	.word	0x080036ab
 800345c:	080036ab 	.word	0x080036ab
 8003460:	080036ab 	.word	0x080036ab
 8003464:	080036ab 	.word	0x080036ab
 8003468:	0800349f 	.word	0x0800349f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800346c:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003478:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	4a90      	ldr	r2, [pc, #576]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800348a:	e111      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800348c:	4b8d      	ldr	r3, [pc, #564]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800348e:	61bb      	str	r3, [r7, #24]
      break;
 8003490:	e10e      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003492:	4b8d      	ldr	r3, [pc, #564]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003494:	61bb      	str	r3, [r7, #24]
      break;
 8003496:	e10b      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003498:	4b8c      	ldr	r3, [pc, #560]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800349a:	61bb      	str	r3, [r7, #24]
      break;
 800349c:	e108      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800349e:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034a8:	4b85      	ldr	r3, [pc, #532]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034b4:	4b82      	ldr	r3, [pc, #520]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034be:	4b80      	ldr	r3, [pc, #512]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	08db      	lsrs	r3, r3, #3
 80034c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80e1 	beq.w	80036a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	f000 8083 	beq.w	80035f0 <HAL_RCC_GetSysClockFreq+0x204>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f200 80a1 	bhi.w	8003634 <HAL_RCC_GetSysClockFreq+0x248>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x114>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d056      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80034fe:	e099      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02d      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800350c:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	08db      	lsrs	r3, r3, #3
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	4a6b      	ldr	r2, [pc, #428]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003536:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003546:	ed97 6a02 	vldr	s12, [r7, #8]
 800354a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800354e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003562:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003566:	e087      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003572:	eddf 6a58 	vldr	s13, [pc, #352]	; 80036d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358a:	ed97 6a02 	vldr	s12, [r7, #8]
 800358e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035aa:	e065      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80036d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80035d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035ee:	e043      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80036dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80035fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003602:	4b2f      	ldr	r3, [pc, #188]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	ed97 6a02 	vldr	s12, [r7, #8]
 8003616:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800361a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003632:	e021      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80036d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003656:	ed97 6a02 	vldr	s12, [r7, #8]
 800365a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003676:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	0a5b      	lsrs	r3, r3, #9
 800367e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003682:	3301      	adds	r3, #1
 8003684:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003690:	edd7 6a07 	vldr	s13, [r7, #28]
 8003694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800369c:	ee17 3a90 	vmov	r3, s15
 80036a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80036a2:	e005      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
      break;
 80036a8:	e002      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036aa:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036ac:	61bb      	str	r3, [r7, #24]
      break;
 80036ae:	bf00      	nop
  }

  return sysclockfreq;
 80036b0:	69bb      	ldr	r3, [r7, #24]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	58024400 	.word	0x58024400
 80036c4:	03d09000 	.word	0x03d09000
 80036c8:	003d0900 	.word	0x003d0900
 80036cc:	007a1200 	.word	0x007a1200
 80036d0:	46000000 	.word	0x46000000
 80036d4:	4c742400 	.word	0x4c742400
 80036d8:	4a742400 	.word	0x4a742400
 80036dc:	4af42400 	.word	0x4af42400

080036e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036e6:	f7ff fe81 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_RCC_GetHCLKFreq+0x50>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	490f      	ldr	r1, [pc, #60]	; (8003734 <HAL_RCC_GetHCLKFreq+0x54>)
 80036f8:	5ccb      	ldrb	r3, [r1, r3]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_RCC_GetHCLKFreq+0x50>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	4a09      	ldr	r2, [pc, #36]	; (8003734 <HAL_RCC_GetHCLKFreq+0x54>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	fa22 f303 	lsr.w	r3, r2, r3
 800371a:	4a07      	ldr	r2, [pc, #28]	; (8003738 <HAL_RCC_GetHCLKFreq+0x58>)
 800371c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <HAL_RCC_GetHCLKFreq+0x58>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	58024400 	.word	0x58024400
 8003734:	080071c0 	.word	0x080071c0
 8003738:	24000004 	.word	0x24000004
 800373c:	24000000 	.word	0x24000000

08003740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003744:	f7ff ffcc 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	091b      	lsrs	r3, r3, #4
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4904      	ldr	r1, [pc, #16]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	58024400 	.word	0x58024400
 8003768:	080071c0 	.word	0x080071c0

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003770:	f7ff ffb6 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	58024400 	.word	0x58024400
 8003794:	080071c0 	.word	0x080071c0

08003798 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b0ca      	sub	sp, #296	; 0x128
 800379e:	af00      	add	r7, sp, #0
 80037a0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80037bc:	2500      	movs	r5, #0
 80037be:	ea54 0305 	orrs.w	r3, r4, r5
 80037c2:	d049      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037ce:	d02f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037d4:	d828      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037da:	d01a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037e0:	d822      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ea:	d007      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037ec:	e01c      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ee:	4bb8      	ldr	r3, [pc, #736]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	4ab7      	ldr	r2, [pc, #732]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037fa:	e01a      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003800:	3308      	adds	r3, #8
 8003802:	2102      	movs	r1, #2
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fc8f 	bl	8005128 <RCCEx_PLL2_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003810:	e00f      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003816:	3328      	adds	r3, #40	; 0x28
 8003818:	2102      	movs	r1, #2
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fd36 	bl	800528c <RCCEx_PLL3_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003826:	e004      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800383a:	4ba5      	ldr	r3, [pc, #660]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003848:	4aa1      	ldr	r2, [pc, #644]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800384a:	430b      	orrs	r3, r1
 800384c:	6513      	str	r3, [r2, #80]	; 0x50
 800384e:	e003      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003854:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003864:	f04f 0900 	mov.w	r9, #0
 8003868:	ea58 0309 	orrs.w	r3, r8, r9
 800386c:	d047      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	2b04      	cmp	r3, #4
 8003876:	d82a      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003895 	.word	0x08003895
 8003884:	080038a3 	.word	0x080038a3
 8003888:	080038b9 	.word	0x080038b9
 800388c:	080038d7 	.word	0x080038d7
 8003890:	080038d7 	.word	0x080038d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003894:	4b8e      	ldr	r3, [pc, #568]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	4a8d      	ldr	r2, [pc, #564]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a0:	e01a      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a6:	3308      	adds	r3, #8
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 fc3c 	bl	8005128 <RCCEx_PLL2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038b6:	e00f      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038bc:	3328      	adds	r3, #40	; 0x28
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fce3 	bl	800528c <RCCEx_PLL3_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038cc:	e004      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038d4:	e000      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e0:	4b7b      	ldr	r3, [pc, #492]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e4:	f023 0107 	bic.w	r1, r3, #7
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	4a78      	ldr	r2, [pc, #480]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6513      	str	r3, [r2, #80]	; 0x50
 80038f4:	e003      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800390a:	f04f 0b00 	mov.w	fp, #0
 800390e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003912:	d04c      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391e:	d030      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003924:	d829      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003926:	2bc0      	cmp	r3, #192	; 0xc0
 8003928:	d02d      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800392a:	2bc0      	cmp	r3, #192	; 0xc0
 800392c:	d825      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d018      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d821      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d007      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800393e:	e01c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4a62      	ldr	r2, [pc, #392]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800394c:	e01c      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003952:	3308      	adds	r3, #8
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f001 fbe6 	bl	8005128 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003962:	e011      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003968:	3328      	adds	r3, #40	; 0x28
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fc8d 	bl	800528c <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003980:	e002      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003990:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	4a4c      	ldr	r2, [pc, #304]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6513      	str	r3, [r2, #80]	; 0x50
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80039ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80039c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d053      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039da:	d035      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e0:	d82e      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039e6:	d031      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039ec:	d828      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f2:	d01a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f8:	d822      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a02:	d007      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a04:	e01c      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a06:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a12:	e01c      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a18:	3308      	adds	r3, #8
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 fb83 	bl	8005128 <RCCEx_PLL2_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a28:	e011      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2e:	3328      	adds	r3, #40	; 0x28
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fc2a 	bl	800528c <RCCEx_PLL3_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a3e:	e006      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a46:	e002      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a48:	bf00      	nop
 8003a4a:	e000      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003a82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a8c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d056      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa2:	d038      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa8:	d831      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003aae:	d034      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ab0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab4:	d82b      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aba:	d01d      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac0:	d825      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003acc:	e01f      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad4:	4ba2      	ldr	r3, [pc, #648]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	4aa1      	ldr	r2, [pc, #644]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae0:	e01c      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fb1c 	bl	8005128 <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003af6:	e011      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afc:	3328      	adds	r3, #40	; 0x28
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f001 fbc3 	bl	800528c <RCCEx_PLL3_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b14:	e002      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b24:	4b8e      	ldr	r3, [pc, #568]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b34:	4a8a      	ldr	r2, [pc, #552]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3a:	e003      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	d03a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	2b30      	cmp	r3, #48	; 0x30
 8003b6c:	d01f      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b6e:	2b30      	cmp	r3, #48	; 0x30
 8003b70:	d819      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d00c      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d815      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d019      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d111      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b82:	4b77      	ldr	r3, [pc, #476]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	4a76      	ldr	r2, [pc, #472]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b8e:	e011      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b94:	3308      	adds	r3, #8
 8003b96:	2102      	movs	r1, #2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 fac5 	bl	8005128 <RCCEx_PLL2_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ba4:	e006      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bac:	e002      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bbc:	4b68      	ldr	r3, [pc, #416]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	4a65      	ldr	r2, [pc, #404]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd0:	e003      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bea:	2300      	movs	r3, #0
 8003bec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bf0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	d051      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c04:	d035      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0a:	d82e      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c10:	d031      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c16:	d828      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1c:	d01a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c22:	d822      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2c:	d007      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c2e:	e01c      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	4a4a      	ldr	r2, [pc, #296]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	3308      	adds	r3, #8
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 fa6e 	bl	8005128 <RCCEx_PLL2_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c52:	e011      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c58:	3328      	adds	r3, #40	; 0x28
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 fb15 	bl	800528c <RCCEx_PLL3_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c68:	e006      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c70:	e002      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c80:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	4a34      	ldr	r2, [pc, #208]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6513      	str	r3, [r2, #80]	; 0x50
 8003c94:	e003      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003caa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003cb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d056      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc8:	d033      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cce:	d82c      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cd4:	d02f      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cda:	d826      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ce0:	d02b      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ce2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ce6:	d820      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cec:	d012      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cf2:	d81a      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d022      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d115      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d02:	3308      	adds	r3, #8
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 fa0e 	bl	8005128 <RCCEx_PLL2_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d12:	e015      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d18:	3328      	adds	r3, #40	; 0x28
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 fab5 	bl	800528c <RCCEx_PLL3_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d28:	e00a      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d30:	e006      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d56:	4a02      	ldr	r2, [pc, #8]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6513      	str	r3, [r2, #80]	; 0x50
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d5e:	bf00      	nop
 8003d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d82:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d055      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d98:	d033      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9e:	d82c      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d02f      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003daa:	d826      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db0:	d02b      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db6:	d820      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dbc:	d012      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc2:	d81a      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d022      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dcc:	d115      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 f9a6 	bl	8005128 <RCCEx_PLL2_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003de2:	e015      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de8:	3328      	adds	r3, #40	; 0x28
 8003dea:	2101      	movs	r1, #1
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fa4d 	bl	800528c <RCCEx_PLL3_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003df8:	e00a      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e02:	bf00      	nop
 8003e04:	e004      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e18:	4ba3      	ldr	r3, [pc, #652]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e28:	4a9f      	ldr	r2, [pc, #636]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e2e:	e003      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	d037      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e62:	d00e      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e68:	d816      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e72:	d111      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e74:	4b8c      	ldr	r3, [pc, #560]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	4a8b      	ldr	r2, [pc, #556]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e80:	e00f      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e86:	3308      	adds	r3, #8
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 f94c 	bl	8005128 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e96:	e004      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eaa:	4b7f      	ldr	r3, [pc, #508]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a7b      	ldr	r2, [pc, #492]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6513      	str	r3, [r2, #80]	; 0x50
 8003ebe:	e003      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ec4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ede:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	d039      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d81c      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f35 	.word	0x08003f35
 8003efc:	08003f09 	.word	0x08003f09
 8003f00:	08003f17 	.word	0x08003f17
 8003f04:	08003f35 	.word	0x08003f35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4b67      	ldr	r3, [pc, #412]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	4a66      	ldr	r2, [pc, #408]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f14:	e00f      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 f902 	bl	8005128 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f3e:	4b5a      	ldr	r3, [pc, #360]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	f023 0103 	bic.w	r1, r3, #3
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4c:	4a56      	ldr	r2, [pc, #344]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003f76:	460b      	mov	r3, r1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f000 809f 	beq.w	80040bc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a4a      	ldr	r2, [pc, #296]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f8a:	f7fd f9af 	bl	80012ec <HAL_GetTick>
 8003f8e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f92:	e00b      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f94:	f7fd f9aa 	bl	80012ec <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b64      	cmp	r3, #100	; 0x64
 8003fa2:	d903      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003faa:	e005      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fac:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ed      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d179      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fc0:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fcc:	4053      	eors	r3, r2
 8003fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fe2:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fee:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ffa:	4a2b      	ldr	r2, [pc, #172]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004006:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800400a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400e:	d118      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fd f96c 	bl	80012ec <HAL_GetTick>
 8004014:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004018:	e00d      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fd f967 	bl	80012ec <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004024:	1ad2      	subs	r2, r2, r3
 8004026:	f241 3388 	movw	r3, #5000	; 0x1388
 800402a:	429a      	cmp	r2, r3
 800402c:	d903      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004034:	e005      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0eb      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004046:	2b00      	cmp	r3, #0
 8004048:	d129      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800405a:	d10e      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004068:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800406c:	091a      	lsrs	r2, r3, #4
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004070:	4013      	ands	r3, r2
 8004072:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004074:	430b      	orrs	r3, r1
 8004076:	6113      	str	r3, [r2, #16]
 8004078:	e005      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004080:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004084:	6113      	str	r3, [r2, #16]
 8004086:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004088:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004096:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6713      	str	r3, [r2, #112]	; 0x70
 800409c:	e00e      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80040a6:	e009      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80040a8:	58024400 	.word	0x58024400
 80040ac:	58024800 	.word	0x58024800
 80040b0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 0301 	and.w	r3, r2, #1
 80040c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	f000 8089 	beq.w	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e4:	2b28      	cmp	r3, #40	; 0x28
 80040e6:	d86b      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	080041c9 	.word	0x080041c9
 80040f4:	080041c1 	.word	0x080041c1
 80040f8:	080041c1 	.word	0x080041c1
 80040fc:	080041c1 	.word	0x080041c1
 8004100:	080041c1 	.word	0x080041c1
 8004104:	080041c1 	.word	0x080041c1
 8004108:	080041c1 	.word	0x080041c1
 800410c:	080041c1 	.word	0x080041c1
 8004110:	08004195 	.word	0x08004195
 8004114:	080041c1 	.word	0x080041c1
 8004118:	080041c1 	.word	0x080041c1
 800411c:	080041c1 	.word	0x080041c1
 8004120:	080041c1 	.word	0x080041c1
 8004124:	080041c1 	.word	0x080041c1
 8004128:	080041c1 	.word	0x080041c1
 800412c:	080041c1 	.word	0x080041c1
 8004130:	080041ab 	.word	0x080041ab
 8004134:	080041c1 	.word	0x080041c1
 8004138:	080041c1 	.word	0x080041c1
 800413c:	080041c1 	.word	0x080041c1
 8004140:	080041c1 	.word	0x080041c1
 8004144:	080041c1 	.word	0x080041c1
 8004148:	080041c1 	.word	0x080041c1
 800414c:	080041c1 	.word	0x080041c1
 8004150:	080041c9 	.word	0x080041c9
 8004154:	080041c1 	.word	0x080041c1
 8004158:	080041c1 	.word	0x080041c1
 800415c:	080041c1 	.word	0x080041c1
 8004160:	080041c1 	.word	0x080041c1
 8004164:	080041c1 	.word	0x080041c1
 8004168:	080041c1 	.word	0x080041c1
 800416c:	080041c1 	.word	0x080041c1
 8004170:	080041c9 	.word	0x080041c9
 8004174:	080041c1 	.word	0x080041c1
 8004178:	080041c1 	.word	0x080041c1
 800417c:	080041c1 	.word	0x080041c1
 8004180:	080041c1 	.word	0x080041c1
 8004184:	080041c1 	.word	0x080041c1
 8004188:	080041c1 	.word	0x080041c1
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041c9 	.word	0x080041c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004198:	3308      	adds	r3, #8
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f000 ffc3 	bl	8005128 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041a8:	e00f      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	3328      	adds	r3, #40	; 0x28
 80041b0:	2101      	movs	r1, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f86a 	bl	800528c <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041be:	e004      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041c6:	e000      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041d2:	4bbf      	ldr	r3, [pc, #764]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e0:	4abb      	ldr	r2, [pc, #748]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6553      	str	r3, [r2, #84]	; 0x54
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f002 0302 	and.w	r3, r2, #2
 80041fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004200:	2300      	movs	r3, #0
 8004202:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004206:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800420a:	460b      	mov	r3, r1
 800420c:	4313      	orrs	r3, r2
 800420e:	d041      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004216:	2b05      	cmp	r3, #5
 8004218:	d824      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	0800426d 	.word	0x0800426d
 8004224:	08004239 	.word	0x08004239
 8004228:	0800424f 	.word	0x0800424f
 800422c:	0800426d 	.word	0x0800426d
 8004230:	0800426d 	.word	0x0800426d
 8004234:	0800426d 	.word	0x0800426d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423c:	3308      	adds	r3, #8
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f000 ff71 	bl	8005128 <RCCEx_PLL2_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800424c:	e00f      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004252:	3328      	adds	r3, #40	; 0x28
 8004254:	2101      	movs	r1, #1
 8004256:	4618      	mov	r0, r3
 8004258:	f001 f818 	bl	800528c <RCCEx_PLL3_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004262:	e004      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800426a:	e000      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800426c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004276:	4b96      	ldr	r3, [pc, #600]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	f023 0107 	bic.w	r1, r3, #7
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004284:	4a92      	ldr	r2, [pc, #584]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004286:	430b      	orrs	r3, r1
 8004288:	6553      	str	r3, [r2, #84]	; 0x54
 800428a:	e003      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004290:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f002 0304 	and.w	r3, r2, #4
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d044      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d825      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	08004315 	.word	0x08004315
 80042cc:	080042e1 	.word	0x080042e1
 80042d0:	080042f7 	.word	0x080042f7
 80042d4:	08004315 	.word	0x08004315
 80042d8:	08004315 	.word	0x08004315
 80042dc:	08004315 	.word	0x08004315
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e4:	3308      	adds	r3, #8
 80042e6:	2101      	movs	r1, #1
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 ff1d 	bl	8005128 <RCCEx_PLL2_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042f4:	e00f      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fa:	3328      	adds	r3, #40	; 0x28
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 ffc4 	bl	800528c <RCCEx_PLL3_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800430a:	e004      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800431e:	4b6c      	ldr	r3, [pc, #432]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	f023 0107 	bic.w	r1, r3, #7
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432e:	4a68      	ldr	r2, [pc, #416]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004330:	430b      	orrs	r3, r1
 8004332:	6593      	str	r3, [r2, #88]	; 0x58
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800433a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f002 0320 	and.w	r3, r2, #32
 800434a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d055      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800436a:	d033      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800436c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004370:	d82c      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d02f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d826      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800437e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004382:	d02b      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004384:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004388:	d820      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800438a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800438e:	d012      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004394:	d81a      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d022      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800439a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800439e:	d115      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a4:	3308      	adds	r3, #8
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 febd 	bl	8005128 <RCCEx_PLL2_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043b4:	e015      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ba:	3328      	adds	r3, #40	; 0x28
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 ff64 	bl	800528c <RCCEx_PLL3_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043ca:	e00a      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043d2:	e006      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043d4:	bf00      	nop
 80043d6:	e004      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043d8:	bf00      	nop
 80043da:	e002      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	4a35      	ldr	r2, [pc, #212]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6553      	str	r3, [r2, #84]	; 0x54
 8004400:	e003      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800441a:	2300      	movs	r3, #0
 800441c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004420:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004424:	460b      	mov	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	d058      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004432:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004436:	d033      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004438:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800443c:	d82c      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004442:	d02f      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004448:	d826      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800444a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800444e:	d02b      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004454:	d820      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d012      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800445c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004460:	d81a      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d022      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446a:	d115      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004470:	3308      	adds	r3, #8
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fe57 	bl	8005128 <RCCEx_PLL2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004480:	e015      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004486:	3328      	adds	r3, #40	; 0x28
 8004488:	2102      	movs	r1, #2
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fefe 	bl	800528c <RCCEx_PLL3_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004496:	e00a      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800449e:	e006      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a0:	bf00      	nop
 80044a2:	e004      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a4:	bf00      	nop
 80044a6:	e002      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a8:	bf00      	nop
 80044aa:	e000      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10e      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044c6:	4a02      	ldr	r2, [pc, #8]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6593      	str	r3, [r2, #88]	; 0x58
 80044cc:	e006      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044ce:	bf00      	nop
 80044d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80044e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d055      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004504:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004508:	d033      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800450a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800450e:	d82c      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004514:	d02f      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d826      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800451c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004520:	d02b      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004522:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004526:	d820      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452c:	d012      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800452e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004532:	d81a      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d022      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453c:	d115      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004542:	3308      	adds	r3, #8
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fdee 	bl	8005128 <RCCEx_PLL2_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004552:	e015      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004558:	3328      	adds	r3, #40	; 0x28
 800455a:	2102      	movs	r1, #2
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fe95 	bl	800528c <RCCEx_PLL3_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004568:	e00a      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004570:	e006      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004572:	bf00      	nop
 8004574:	e004      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004576:	bf00      	nop
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800457e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004580:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004588:	4ba1      	ldr	r3, [pc, #644]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004598:	4a9d      	ldr	r2, [pc, #628]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459a:	430b      	orrs	r3, r1
 800459c:	6593      	str	r3, [r2, #88]	; 0x58
 800459e:	e003      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f002 0308 	and.w	r3, r2, #8
 80045b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d01e      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045da:	3328      	adds	r3, #40	; 0x28
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fe54 	bl	800528c <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045f0:	4b87      	ldr	r3, [pc, #540]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004600:	4a83      	ldr	r2, [pc, #524]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004602:	430b      	orrs	r3, r1
 8004604:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f002 0310 	and.w	r3, r2, #16
 8004612:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004616:	2300      	movs	r3, #0
 8004618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800461c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d01e      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	d10c      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004638:	3328      	adds	r3, #40	; 0x28
 800463a:	2102      	movs	r1, #2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fe25 	bl	800528c <RCCEx_PLL3_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800464e:	4b70      	ldr	r3, [pc, #448]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800465e:	4a6c      	ldr	r2, [pc, #432]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004660:	430b      	orrs	r3, r1
 8004662:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800467a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d03e      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004688:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800468c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004690:	d022      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004696:	d81b      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a0:	d00b      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80046a2:	e015      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a8:	3308      	adds	r3, #8
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fd3b 	bl	8005128 <RCCEx_PLL2_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046b8:	e00f      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	3328      	adds	r3, #40	; 0x28
 80046c0:	2102      	movs	r1, #2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fde2 	bl	800528c <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046ce:	e004      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80046d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10b      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e2:	4b4b      	ldr	r3, [pc, #300]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046f2:	4a47      	ldr	r2, [pc, #284]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6593      	str	r3, [r2, #88]	; 0x58
 80046f8:	e003      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800470e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004710:	2300      	movs	r3, #0
 8004712:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004714:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004718:	460b      	mov	r3, r1
 800471a:	4313      	orrs	r3, r2
 800471c:	d03b      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800472a:	d01f      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800472c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004730:	d818      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004736:	d003      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800473c:	d007      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800473e:	e011      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004740:	4b33      	ldr	r3, [pc, #204]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	4a32      	ldr	r2, [pc, #200]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800474c:	e00f      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004752:	3328      	adds	r3, #40	; 0x28
 8004754:	2101      	movs	r1, #1
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fd98 	bl	800528c <RCCEx_PLL3_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004762:	e004      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800476a:	e000      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800476c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10b      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004776:	4b26      	ldr	r3, [pc, #152]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004788:	430b      	orrs	r3, r1
 800478a:	6553      	str	r3, [r2, #84]	; 0x54
 800478c:	e003      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80047a2:	673b      	str	r3, [r7, #112]	; 0x70
 80047a4:	2300      	movs	r3, #0
 80047a6:	677b      	str	r3, [r7, #116]	; 0x74
 80047a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d034      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d007      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047c2:	e011      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c4:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	4a11      	ldr	r2, [pc, #68]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047d0:	e00e      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d6:	3308      	adds	r3, #8
 80047d8:	2102      	movs	r1, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fca4 	bl	8005128 <RCCEx_PLL2_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047e6:	e003      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004806:	4a02      	ldr	r2, [pc, #8]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004808:	430b      	orrs	r3, r1
 800480a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800480c:	e006      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800480e:	bf00      	nop
 8004810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004818:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004828:	66bb      	str	r3, [r7, #104]	; 0x68
 800482a:	2300      	movs	r3, #0
 800482c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800482e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004832:	460b      	mov	r3, r1
 8004834:	4313      	orrs	r3, r2
 8004836:	d00c      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483c:	3328      	adds	r3, #40	; 0x28
 800483e:	2102      	movs	r1, #2
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fd23 	bl	800528c <RCCEx_PLL3_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800485e:	663b      	str	r3, [r7, #96]	; 0x60
 8004860:	2300      	movs	r3, #0
 8004862:	667b      	str	r3, [r7, #100]	; 0x64
 8004864:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004868:	460b      	mov	r3, r1
 800486a:	4313      	orrs	r3, r2
 800486c:	d038      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487a:	d018      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800487c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004880:	d811      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004886:	d014      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800488c:	d80b      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d011      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004896:	d106      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004898:	4bc3      	ldr	r3, [pc, #780]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	4ac2      	ldr	r2, [pc, #776]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048a4:	e008      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048ac:	e004      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048c0:	4bb9      	ldr	r3, [pc, #740]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d0:	4ab5      	ldr	r2, [pc, #724]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6553      	str	r3, [r2, #84]	; 0x54
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80048ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ee:	2300      	movs	r3, #0
 80048f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80048f6:	460b      	mov	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048fc:	4baa      	ldr	r3, [pc, #680]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004900:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490a:	4aa7      	ldr	r2, [pc, #668]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490c:	430b      	orrs	r3, r1
 800490e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800491c:	653b      	str	r3, [r7, #80]	; 0x50
 800491e:	2300      	movs	r3, #0
 8004920:	657b      	str	r3, [r7, #84]	; 0x54
 8004922:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800492c:	4b9e      	ldr	r3, [pc, #632]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800493c:	4a9a      	ldr	r2, [pc, #616]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493e:	430b      	orrs	r3, r1
 8004940:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004950:	2300      	movs	r3, #0
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004954:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800495e:	4b92      	ldr	r3, [pc, #584]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004962:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496c:	4a8e      	ldr	r2, [pc, #568]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800496e:	430b      	orrs	r3, r1
 8004970:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800497e:	643b      	str	r3, [r7, #64]	; 0x40
 8004980:	2300      	movs	r3, #0
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d00e      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800498e:	4b86      	ldr	r3, [pc, #536]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	4a85      	ldr	r2, [pc, #532]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004994:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004998:	6113      	str	r3, [r2, #16]
 800499a:	4b83      	ldr	r3, [pc, #524]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499c:	6919      	ldr	r1, [r3, #16]
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049a6:	4a80      	ldr	r2, [pc, #512]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ba:	2300      	movs	r3, #0
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d009      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049c8:	4b77      	ldr	r3, [pc, #476]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049cc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80049d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	4a74      	ldr	r2, [pc, #464]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d8:	430b      	orrs	r3, r1
 80049da:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ea:	2300      	movs	r3, #0
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
 80049ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80049f2:	460b      	mov	r3, r1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f8:	4b6b      	ldr	r3, [pc, #428]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a08:	4a67      	ldr	r2, [pc, #412]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	2100      	movs	r1, #0
 8004a18:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a20:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004a24:	460b      	mov	r3, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d011      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2e:	3308      	adds	r3, #8
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb78 	bl	8005128 <RCCEx_PLL2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	2100      	movs	r1, #0
 8004a58:	6239      	str	r1, [r7, #32]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a64:	460b      	mov	r3, r1
 8004a66:	4313      	orrs	r3, r2
 8004a68:	d011      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6e:	3308      	adds	r3, #8
 8004a70:	2101      	movs	r1, #1
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fb58 	bl	8005128 <RCCEx_PLL2_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	2100      	movs	r1, #0
 8004a98:	61b9      	str	r1, [r7, #24]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	d011      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aae:	3308      	adds	r3, #8
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fb38 	bl	8005128 <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	6139      	str	r1, [r7, #16]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	d011      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aee:	3328      	adds	r3, #40	; 0x28
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fbca 	bl	800528c <RCCEx_PLL3_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	2100      	movs	r1, #0
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b24:	460b      	mov	r3, r1
 8004b26:	4313      	orrs	r3, r2
 8004b28:	d011      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b2e:	3328      	adds	r3, #40	; 0x28
 8004b30:	2101      	movs	r1, #1
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fbaa 	bl	800528c <RCCEx_PLL3_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	2100      	movs	r1, #0
 8004b58:	6039      	str	r1, [r7, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d011      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6e:	3328      	adds	r3, #40	; 0x28
 8004b70:	2102      	movs	r1, #2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb8a 	bl	800528c <RCCEx_PLL3_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004b8e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba8:	58024400 	.word	0x58024400

08004bac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bb0:	f7fe fd96 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4904      	ldr	r1, [pc, #16]	; (8004bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	58024400 	.word	0x58024400
 8004bd4:	080071c0 	.word	0x080071c0

08004bd8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b089      	sub	sp, #36	; 0x24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004be0:	4ba1      	ldr	r3, [pc, #644]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bea:	4b9f      	ldr	r3, [pc, #636]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	0b1b      	lsrs	r3, r3, #12
 8004bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bf6:	4b9c      	ldr	r3, [pc, #624]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c02:	4b99      	ldr	r3, [pc, #612]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c06:	08db      	lsrs	r3, r3, #3
 8004c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8111 	beq.w	8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	f000 8083 	beq.w	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f200 80a1 	bhi.w	8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d056      	beq.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c42:	e099      	b.n	8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c44:	4b88      	ldr	r3, [pc, #544]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02d      	beq.n	8004cac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c50:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	4a84      	ldr	r2, [pc, #528]	; (8004e6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7a:	4b7b      	ldr	r3, [pc, #492]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004caa:	e087      	b.n	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cee:	e065      	b.n	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d02:	4b59      	ldr	r3, [pc, #356]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d32:	e043      	b.n	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	4b48      	ldr	r3, [pc, #288]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d76:	e021      	b.n	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8a:	4b37      	ldr	r3, [pc, #220]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004dbc:	4b2a      	ldr	r3, [pc, #168]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	0a5b      	lsrs	r3, r3, #9
 8004dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de2:	ee17 2a90 	vmov	r2, s15
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004dea:	4b1f      	ldr	r3, [pc, #124]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df4:	ee07 3a90 	vmov	s15, r3
 8004df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e10:	ee17 2a90 	vmov	r2, s15
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e18:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	0e1b      	lsrs	r3, r3, #24
 8004e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3e:	ee17 2a90 	vmov	r2, s15
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e46:	e008      	b.n	8004e5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	609a      	str	r2, [r3, #8]
}
 8004e5a:	bf00      	nop
 8004e5c:	3724      	adds	r7, #36	; 0x24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	03d09000 	.word	0x03d09000
 8004e70:	46000000 	.word	0x46000000
 8004e74:	4c742400 	.word	0x4c742400
 8004e78:	4a742400 	.word	0x4a742400
 8004e7c:	4af42400 	.word	0x4af42400

08004e80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b089      	sub	sp, #36	; 0x24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e88:	4ba1      	ldr	r3, [pc, #644]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e92:	4b9f      	ldr	r3, [pc, #636]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	0d1b      	lsrs	r3, r3, #20
 8004e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e9e:	4b9c      	ldr	r3, [pc, #624]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004eaa:	4b99      	ldr	r3, [pc, #612]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	08db      	lsrs	r3, r3, #3
 8004eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8111 	beq.w	80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	f000 8083 	beq.w	8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f200 80a1 	bhi.w	8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d056      	beq.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004eea:	e099      	b.n	8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eec:	4b88      	ldr	r3, [pc, #544]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02d      	beq.n	8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef8:	4b85      	ldr	r3, [pc, #532]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	08db      	lsrs	r3, r3, #3
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	4a84      	ldr	r2, [pc, #528]	; (8005114 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
 8004f08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b7b      	ldr	r3, [pc, #492]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f52:	e087      	b.n	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800511c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b6a      	ldr	r3, [pc, #424]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f96:	e065      	b.n	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b59      	ldr	r3, [pc, #356]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fbe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fda:	e043      	b.n	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b48      	ldr	r3, [pc, #288]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005002:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800501e:	e021      	b.n	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	ed97 6a03 	vldr	s12, [r7, #12]
 8005046:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005062:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005064:	4b2a      	ldr	r3, [pc, #168]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	0a5b      	lsrs	r3, r3, #9
 800506a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800507a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508a:	ee17 2a90 	vmov	r2, s15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005092:	4b1f      	ldr	r3, [pc, #124]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800509c:	ee07 3a90 	vmov	s15, r3
 80050a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b8:	ee17 2a90 	vmov	r2, s15
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050c0:	4b13      	ldr	r3, [pc, #76]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	0e1b      	lsrs	r3, r3, #24
 80050c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050da:	edd7 6a07 	vldr	s13, [r7, #28]
 80050de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e6:	ee17 2a90 	vmov	r2, s15
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050ee:	e008      	b.n	8005102 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
}
 8005102:	bf00      	nop
 8005104:	3724      	adds	r7, #36	; 0x24
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
 8005114:	03d09000 	.word	0x03d09000
 8005118:	46000000 	.word	0x46000000
 800511c:	4c742400 	.word	0x4c742400
 8005120:	4a742400 	.word	0x4a742400
 8005124:	4af42400 	.word	0x4af42400

08005128 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005136:	4b53      	ldr	r3, [pc, #332]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d101      	bne.n	8005146 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e099      	b.n	800527a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005146:	4b4f      	ldr	r3, [pc, #316]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a4e      	ldr	r2, [pc, #312]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800514c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005152:	f7fc f8cb 	bl	80012ec <HAL_GetTick>
 8005156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005158:	e008      	b.n	800516c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800515a:	f7fc f8c7 	bl	80012ec <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e086      	b.n	800527a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800516c:	4b45      	ldr	r3, [pc, #276]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005178:	4b42      	ldr	r3, [pc, #264]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	031b      	lsls	r3, r3, #12
 8005186:	493f      	ldr	r1, [pc, #252]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005188:	4313      	orrs	r3, r2
 800518a:	628b      	str	r3, [r1, #40]	; 0x28
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	3b01      	subs	r3, #1
 8005192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	3b01      	subs	r3, #1
 800519c:	025b      	lsls	r3, r3, #9
 800519e:	b29b      	uxth	r3, r3
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	061b      	lsls	r3, r3, #24
 80051b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051bc:	4931      	ldr	r1, [pc, #196]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051c2:	4b30      	ldr	r3, [pc, #192]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	492d      	ldr	r1, [pc, #180]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051d4:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	f023 0220 	bic.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	4928      	ldr	r1, [pc, #160]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	4a26      	ldr	r2, [pc, #152]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	f023 0310 	bic.w	r3, r3, #16
 80051f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051f2:	4b24      	ldr	r3, [pc, #144]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <RCCEx_PLL2_Config+0x160>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	69d2      	ldr	r2, [r2, #28]
 80051fe:	00d2      	lsls	r2, r2, #3
 8005200:	4920      	ldr	r1, [pc, #128]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005206:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800520c:	f043 0310 	orr.w	r3, r3, #16
 8005210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005218:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	4a19      	ldr	r2, [pc, #100]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800521e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005222:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005224:	e00f      	b.n	8005246 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d106      	bne.n	800523a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800522c:	4b15      	ldr	r3, [pc, #84]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a14      	ldr	r2, [pc, #80]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005236:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005238:	e005      	b.n	8005246 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a11      	ldr	r2, [pc, #68]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800524c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005252:	f7fc f84b 	bl	80012ec <HAL_GetTick>
 8005256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005258:	e008      	b.n	800526c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800525a:	f7fc f847 	bl	80012ec <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	58024400 	.word	0x58024400
 8005288:	ffff0007 	.word	0xffff0007

0800528c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800529a:	4b53      	ldr	r3, [pc, #332]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d101      	bne.n	80052aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e099      	b.n	80053de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052aa:	4b4f      	ldr	r3, [pc, #316]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a4e      	ldr	r2, [pc, #312]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b6:	f7fc f819 	bl	80012ec <HAL_GetTick>
 80052ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052bc:	e008      	b.n	80052d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052be:	f7fc f815 	bl	80012ec <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e086      	b.n	80053de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052d0:	4b45      	ldr	r3, [pc, #276]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052dc:	4b42      	ldr	r3, [pc, #264]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	051b      	lsls	r3, r3, #20
 80052ea:	493f      	ldr	r1, [pc, #252]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	628b      	str	r3, [r1, #40]	; 0x28
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	3b01      	subs	r3, #1
 8005300:	025b      	lsls	r3, r3, #9
 8005302:	b29b      	uxth	r3, r3
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	3b01      	subs	r3, #1
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	3b01      	subs	r3, #1
 800531a:	061b      	lsls	r3, r3, #24
 800531c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005320:	4931      	ldr	r1, [pc, #196]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005326:	4b30      	ldr	r3, [pc, #192]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	492d      	ldr	r1, [pc, #180]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005334:	4313      	orrs	r3, r2
 8005336:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005338:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	4928      	ldr	r1, [pc, #160]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800534a:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005356:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535a:	4b24      	ldr	r3, [pc, #144]	; (80053ec <RCCEx_PLL3_Config+0x160>)
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	69d2      	ldr	r2, [r2, #28]
 8005362:	00d2      	lsls	r2, r2, #3
 8005364:	4920      	ldr	r1, [pc, #128]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005366:	4313      	orrs	r3, r2
 8005368:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800536a:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800537c:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005382:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005388:	e00f      	b.n	80053aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d106      	bne.n	800539e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005390:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005396:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800539a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800539c:	e005      	b.n	80053aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800539e:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053aa:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a0e      	ldr	r2, [pc, #56]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b6:	f7fb ff99 	bl	80012ec <HAL_GetTick>
 80053ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053bc:	e008      	b.n	80053d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053be:	f7fb ff95 	bl	80012ec <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e006      	b.n	80053de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	58024400 	.word	0x58024400
 80053ec:	ffff0007 	.word	0xffff0007

080053f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e049      	b.n	8005496 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fb fd66 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f000 f9f6 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d001      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e054      	b.n	8005562 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a26      	ldr	r2, [pc, #152]	; (8005570 <HAL_TIM_Base_Start_IT+0xd0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d022      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e2:	d01d      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a22      	ldr	r2, [pc, #136]	; (8005574 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d018      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a21      	ldr	r2, [pc, #132]	; (8005578 <HAL_TIM_Base_Start_IT+0xd8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1f      	ldr	r2, [pc, #124]	; (800557c <HAL_TIM_Base_Start_IT+0xdc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00e      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <HAL_TIM_Base_Start_IT+0xe0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d009      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1c      	ldr	r2, [pc, #112]	; (8005584 <HAL_TIM_Base_Start_IT+0xe4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <HAL_TIM_Base_Start_IT+0xe8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d115      	bne.n	800554c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	4b19      	ldr	r3, [pc, #100]	; (800558c <HAL_TIM_Base_Start_IT+0xec>)
 8005528:	4013      	ands	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b06      	cmp	r3, #6
 8005530:	d015      	beq.n	800555e <HAL_TIM_Base_Start_IT+0xbe>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d011      	beq.n	800555e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554a:	e008      	b.n	800555e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e000      	b.n	8005560 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800
 800557c:	40000c00 	.word	0x40000c00
 8005580:	40010400 	.word	0x40010400
 8005584:	40001800 	.word	0x40001800
 8005588:	40014000 	.word	0x40014000
 800558c:	00010007 	.word	0x00010007

08005590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d122      	bne.n	80055ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d11b      	bne.n	80055ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0202 	mvn.w	r2, #2
 80055bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f905 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8f7 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f908 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b04      	cmp	r3, #4
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0204 	mvn.w	r2, #4
 8005610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8db 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8cd 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8de 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b08      	cmp	r3, #8
 800564c:	d122      	bne.n	8005694 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d11b      	bne.n	8005694 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0208 	mvn.w	r2, #8
 8005664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2204      	movs	r2, #4
 800566a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8b1 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 8005680:	e005      	b.n	800568e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8a3 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8b4 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d122      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d11b      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0210 	mvn.w	r2, #16
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2208      	movs	r2, #8
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f887 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f879 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f88a 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d10e      	bne.n	8005714 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	d107      	bne.n	8005714 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0201 	mvn.w	r2, #1
 800570c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb fa80 	bl	8000c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d10e      	bne.n	8005740 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d107      	bne.n	8005740 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f914 	bl	8005968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574e:	d10e      	bne.n	800576e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d107      	bne.n	800576e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f907 	bl	800597c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d10e      	bne.n	800579a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d107      	bne.n	800579a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f838 	bl	800580a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d10e      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d107      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f06f 0220 	mvn.w	r2, #32
 80057be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f8c7 	bl	8005954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a40      	ldr	r2, [pc, #256]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3d      	ldr	r2, [pc, #244]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3c      	ldr	r2, [pc, #240]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3a      	ldr	r2, [pc, #232]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2f      	ldr	r2, [pc, #188]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01f      	beq.n	80058ba <TIM_Base_SetConfig+0x9a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d01b      	beq.n	80058ba <TIM_Base_SetConfig+0x9a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d017      	beq.n	80058ba <TIM_Base_SetConfig+0x9a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <TIM_Base_SetConfig+0x9a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00f      	beq.n	80058ba <TIM_Base_SetConfig+0x9a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a29      	ldr	r2, [pc, #164]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00b      	beq.n	80058ba <TIM_Base_SetConfig+0x9a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a28      	ldr	r2, [pc, #160]	; (8005948 <TIM_Base_SetConfig+0x128>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_Base_SetConfig+0x9a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a27      	ldr	r2, [pc, #156]	; (800594c <TIM_Base_SetConfig+0x12c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_Base_SetConfig+0x9a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <TIM_Base_SetConfig+0x130>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d108      	bne.n	80058cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a10      	ldr	r2, [pc, #64]	; (8005934 <TIM_Base_SetConfig+0x114>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00f      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a12      	ldr	r2, [pc, #72]	; (8005944 <TIM_Base_SetConfig+0x124>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00b      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a11      	ldr	r2, [pc, #68]	; (8005948 <TIM_Base_SetConfig+0x128>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a10      	ldr	r2, [pc, #64]	; (800594c <TIM_Base_SetConfig+0x12c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0f      	ldr	r2, [pc, #60]	; (8005950 <TIM_Base_SetConfig+0x130>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d103      	bne.n	8005920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	615a      	str	r2, [r3, #20]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40000c00 	.word	0x40000c00
 8005944:	40010400 	.word	0x40010400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800

08005954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e042      	b.n	8005a28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fb fabf 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2224      	movs	r2, #36	; 0x24
 80059be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f82c 	bl	8005a30 <UART_SetConfig>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e022      	b.n	8005a28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fd88 	bl	8006500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fe0f 	bl	8006644 <UART_CheckIdleState>
 8005a26:	4603      	mov	r3, r0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a34:	b092      	sub	sp, #72	; 0x48
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4bbe      	ldr	r3, [pc, #760]	; (8005d58 <UART_SetConfig+0x328>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4ab3      	ldr	r2, [pc, #716]	; (8005d5c <UART_SetConfig+0x32c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	4baf      	ldr	r3, [pc, #700]	; (8005d60 <UART_SetConfig+0x330>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	f023 010f 	bic.w	r1, r3, #15
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4aa6      	ldr	r2, [pc, #664]	; (8005d64 <UART_SetConfig+0x334>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d177      	bne.n	8005bc0 <UART_SetConfig+0x190>
 8005ad0:	4ba5      	ldr	r3, [pc, #660]	; (8005d68 <UART_SetConfig+0x338>)
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ad8:	2b28      	cmp	r3, #40	; 0x28
 8005ada:	d86d      	bhi.n	8005bb8 <UART_SetConfig+0x188>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <UART_SetConfig+0xb4>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b89 	.word	0x08005b89
 8005ae8:	08005bb9 	.word	0x08005bb9
 8005aec:	08005bb9 	.word	0x08005bb9
 8005af0:	08005bb9 	.word	0x08005bb9
 8005af4:	08005bb9 	.word	0x08005bb9
 8005af8:	08005bb9 	.word	0x08005bb9
 8005afc:	08005bb9 	.word	0x08005bb9
 8005b00:	08005bb9 	.word	0x08005bb9
 8005b04:	08005b91 	.word	0x08005b91
 8005b08:	08005bb9 	.word	0x08005bb9
 8005b0c:	08005bb9 	.word	0x08005bb9
 8005b10:	08005bb9 	.word	0x08005bb9
 8005b14:	08005bb9 	.word	0x08005bb9
 8005b18:	08005bb9 	.word	0x08005bb9
 8005b1c:	08005bb9 	.word	0x08005bb9
 8005b20:	08005bb9 	.word	0x08005bb9
 8005b24:	08005b99 	.word	0x08005b99
 8005b28:	08005bb9 	.word	0x08005bb9
 8005b2c:	08005bb9 	.word	0x08005bb9
 8005b30:	08005bb9 	.word	0x08005bb9
 8005b34:	08005bb9 	.word	0x08005bb9
 8005b38:	08005bb9 	.word	0x08005bb9
 8005b3c:	08005bb9 	.word	0x08005bb9
 8005b40:	08005bb9 	.word	0x08005bb9
 8005b44:	08005ba1 	.word	0x08005ba1
 8005b48:	08005bb9 	.word	0x08005bb9
 8005b4c:	08005bb9 	.word	0x08005bb9
 8005b50:	08005bb9 	.word	0x08005bb9
 8005b54:	08005bb9 	.word	0x08005bb9
 8005b58:	08005bb9 	.word	0x08005bb9
 8005b5c:	08005bb9 	.word	0x08005bb9
 8005b60:	08005bb9 	.word	0x08005bb9
 8005b64:	08005ba9 	.word	0x08005ba9
 8005b68:	08005bb9 	.word	0x08005bb9
 8005b6c:	08005bb9 	.word	0x08005bb9
 8005b70:	08005bb9 	.word	0x08005bb9
 8005b74:	08005bb9 	.word	0x08005bb9
 8005b78:	08005bb9 	.word	0x08005bb9
 8005b7c:	08005bb9 	.word	0x08005bb9
 8005b80:	08005bb9 	.word	0x08005bb9
 8005b84:	08005bb1 	.word	0x08005bb1
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e222      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005b90:	2304      	movs	r3, #4
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e21e      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e21a      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e216      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e212      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005bb0:	2340      	movs	r3, #64	; 0x40
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e20e      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e20a      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a69      	ldr	r2, [pc, #420]	; (8005d6c <UART_SetConfig+0x33c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d130      	bne.n	8005c2c <UART_SetConfig+0x1fc>
 8005bca:	4b67      	ldr	r3, [pc, #412]	; (8005d68 <UART_SetConfig+0x338>)
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	d826      	bhi.n	8005c24 <UART_SetConfig+0x1f4>
 8005bd6:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <UART_SetConfig+0x1ac>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005bf5 	.word	0x08005bf5
 8005be0:	08005bfd 	.word	0x08005bfd
 8005be4:	08005c05 	.word	0x08005c05
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c15 	.word	0x08005c15
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e1ec      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e1e8      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c04:	2308      	movs	r3, #8
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e1e4      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e1e0      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c14:	2320      	movs	r3, #32
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e1dc      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e1d8      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2a:	e1d4      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a4f      	ldr	r2, [pc, #316]	; (8005d70 <UART_SetConfig+0x340>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d130      	bne.n	8005c98 <UART_SetConfig+0x268>
 8005c36:	4b4c      	ldr	r3, [pc, #304]	; (8005d68 <UART_SetConfig+0x338>)
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	d826      	bhi.n	8005c90 <UART_SetConfig+0x260>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <UART_SetConfig+0x218>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	08005c71 	.word	0x08005c71
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e1b6      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e1b2      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c70:	2308      	movs	r3, #8
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e1ae      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e1aa      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c80:	2320      	movs	r3, #32
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e1a6      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c88:	2340      	movs	r3, #64	; 0x40
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8e:	e1a2      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e19e      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a35      	ldr	r2, [pc, #212]	; (8005d74 <UART_SetConfig+0x344>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d130      	bne.n	8005d04 <UART_SetConfig+0x2d4>
 8005ca2:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <UART_SetConfig+0x338>)
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b05      	cmp	r3, #5
 8005cac:	d826      	bhi.n	8005cfc <UART_SetConfig+0x2cc>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x284>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005ccd 	.word	0x08005ccd
 8005cb8:	08005cd5 	.word	0x08005cd5
 8005cbc:	08005cdd 	.word	0x08005cdd
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005ced 	.word	0x08005ced
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e180      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e17c      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e178      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e174      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005cec:	2320      	movs	r3, #32
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e170      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005cf4:	2340      	movs	r3, #64	; 0x40
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e16c      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e168      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1b      	ldr	r2, [pc, #108]	; (8005d78 <UART_SetConfig+0x348>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d142      	bne.n	8005d94 <UART_SetConfig+0x364>
 8005d0e:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <UART_SetConfig+0x338>)
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d838      	bhi.n	8005d8c <UART_SetConfig+0x35c>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x2f0>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d39 	.word	0x08005d39
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	08005d49 	.word	0x08005d49
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d7d 	.word	0x08005d7d
 8005d34:	08005d85 	.word	0x08005d85
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e14a      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e146      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e142      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e13e      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005d58:	cfff69f3 	.word	0xcfff69f3
 8005d5c:	58000c00 	.word	0x58000c00
 8005d60:	11fff4ff 	.word	0x11fff4ff
 8005d64:	40011000 	.word	0x40011000
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	40004400 	.word	0x40004400
 8005d70:	40004800 	.word	0x40004800
 8005d74:	40004c00 	.word	0x40004c00
 8005d78:	40005000 	.word	0x40005000
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e128      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005d84:	2340      	movs	r3, #64	; 0x40
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8a:	e124      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e120      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4acb      	ldr	r2, [pc, #812]	; (80060c8 <UART_SetConfig+0x698>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d176      	bne.n	8005e8c <UART_SetConfig+0x45c>
 8005d9e:	4bcb      	ldr	r3, [pc, #812]	; (80060cc <UART_SetConfig+0x69c>)
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005da6:	2b28      	cmp	r3, #40	; 0x28
 8005da8:	d86c      	bhi.n	8005e84 <UART_SetConfig+0x454>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <UART_SetConfig+0x380>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005e55 	.word	0x08005e55
 8005db4:	08005e85 	.word	0x08005e85
 8005db8:	08005e85 	.word	0x08005e85
 8005dbc:	08005e85 	.word	0x08005e85
 8005dc0:	08005e85 	.word	0x08005e85
 8005dc4:	08005e85 	.word	0x08005e85
 8005dc8:	08005e85 	.word	0x08005e85
 8005dcc:	08005e85 	.word	0x08005e85
 8005dd0:	08005e5d 	.word	0x08005e5d
 8005dd4:	08005e85 	.word	0x08005e85
 8005dd8:	08005e85 	.word	0x08005e85
 8005ddc:	08005e85 	.word	0x08005e85
 8005de0:	08005e85 	.word	0x08005e85
 8005de4:	08005e85 	.word	0x08005e85
 8005de8:	08005e85 	.word	0x08005e85
 8005dec:	08005e85 	.word	0x08005e85
 8005df0:	08005e65 	.word	0x08005e65
 8005df4:	08005e85 	.word	0x08005e85
 8005df8:	08005e85 	.word	0x08005e85
 8005dfc:	08005e85 	.word	0x08005e85
 8005e00:	08005e85 	.word	0x08005e85
 8005e04:	08005e85 	.word	0x08005e85
 8005e08:	08005e85 	.word	0x08005e85
 8005e0c:	08005e85 	.word	0x08005e85
 8005e10:	08005e6d 	.word	0x08005e6d
 8005e14:	08005e85 	.word	0x08005e85
 8005e18:	08005e85 	.word	0x08005e85
 8005e1c:	08005e85 	.word	0x08005e85
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	08005e85 	.word	0x08005e85
 8005e28:	08005e85 	.word	0x08005e85
 8005e2c:	08005e85 	.word	0x08005e85
 8005e30:	08005e75 	.word	0x08005e75
 8005e34:	08005e85 	.word	0x08005e85
 8005e38:	08005e85 	.word	0x08005e85
 8005e3c:	08005e85 	.word	0x08005e85
 8005e40:	08005e85 	.word	0x08005e85
 8005e44:	08005e85 	.word	0x08005e85
 8005e48:	08005e85 	.word	0x08005e85
 8005e4c:	08005e85 	.word	0x08005e85
 8005e50:	08005e7d 	.word	0x08005e7d
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5a:	e0bc      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e62:	e0b8      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005e64:	2308      	movs	r3, #8
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e0b4      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e0b0      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005e74:	2320      	movs	r3, #32
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7a:	e0ac      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005e7c:	2340      	movs	r3, #64	; 0x40
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e82:	e0a8      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8a:	e0a4      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a8f      	ldr	r2, [pc, #572]	; (80060d0 <UART_SetConfig+0x6a0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d130      	bne.n	8005ef8 <UART_SetConfig+0x4c8>
 8005e96:	4b8d      	ldr	r3, [pc, #564]	; (80060cc <UART_SetConfig+0x69c>)
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	d826      	bhi.n	8005ef0 <UART_SetConfig+0x4c0>
 8005ea2:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <UART_SetConfig+0x478>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005ec1 	.word	0x08005ec1
 8005eac:	08005ec9 	.word	0x08005ec9
 8005eb0:	08005ed1 	.word	0x08005ed1
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec6:	e086      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ece:	e082      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed6:	e07e      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e07a      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e076      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ee8:	2340      	movs	r3, #64	; 0x40
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e072      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ef0:	2380      	movs	r3, #128	; 0x80
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e06e      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a75      	ldr	r2, [pc, #468]	; (80060d4 <UART_SetConfig+0x6a4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d130      	bne.n	8005f64 <UART_SetConfig+0x534>
 8005f02:	4b72      	ldr	r3, [pc, #456]	; (80060cc <UART_SetConfig+0x69c>)
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d826      	bhi.n	8005f5c <UART_SetConfig+0x52c>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <UART_SetConfig+0x4e4>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f2d 	.word	0x08005f2d
 8005f18:	08005f35 	.word	0x08005f35
 8005f1c:	08005f3d 	.word	0x08005f3d
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e050      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005f34:	2304      	movs	r3, #4
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3a:	e04c      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e048      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005f44:	2310      	movs	r3, #16
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e044      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e040      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5a:	e03c      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f62:	e038      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a5b      	ldr	r2, [pc, #364]	; (80060d8 <UART_SetConfig+0x6a8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d130      	bne.n	8005fd0 <UART_SetConfig+0x5a0>
 8005f6e:	4b57      	ldr	r3, [pc, #348]	; (80060cc <UART_SetConfig+0x69c>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d826      	bhi.n	8005fc8 <UART_SetConfig+0x598>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <UART_SetConfig+0x550>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005f99 	.word	0x08005f99
 8005f84:	08005fa1 	.word	0x08005fa1
 8005f88:	08005fa9 	.word	0x08005fa9
 8005f8c:	08005fb1 	.word	0x08005fb1
 8005f90:	08005fb9 	.word	0x08005fb9
 8005f94:	08005fc1 	.word	0x08005fc1
 8005f98:	2302      	movs	r3, #2
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e01a      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005fa0:	2304      	movs	r3, #4
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e016      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005fa8:	2308      	movs	r3, #8
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e012      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e00e      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005fb8:	2320      	movs	r3, #32
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e00a      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc6:	e006      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fce:	e002      	b.n	8005fd6 <UART_SetConfig+0x5a6>
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a3f      	ldr	r2, [pc, #252]	; (80060d8 <UART_SetConfig+0x6a8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	f040 80f8 	bne.w	80061d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fe2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	dc46      	bgt.n	8006078 <UART_SetConfig+0x648>
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	f2c0 8082 	blt.w	80060f4 <UART_SetConfig+0x6c4>
 8005ff0:	3b02      	subs	r3, #2
 8005ff2:	2b1e      	cmp	r3, #30
 8005ff4:	d87e      	bhi.n	80060f4 <UART_SetConfig+0x6c4>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <UART_SetConfig+0x5cc>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	0800607f 	.word	0x0800607f
 8006000:	080060f5 	.word	0x080060f5
 8006004:	08006087 	.word	0x08006087
 8006008:	080060f5 	.word	0x080060f5
 800600c:	080060f5 	.word	0x080060f5
 8006010:	080060f5 	.word	0x080060f5
 8006014:	08006097 	.word	0x08006097
 8006018:	080060f5 	.word	0x080060f5
 800601c:	080060f5 	.word	0x080060f5
 8006020:	080060f5 	.word	0x080060f5
 8006024:	080060f5 	.word	0x080060f5
 8006028:	080060f5 	.word	0x080060f5
 800602c:	080060f5 	.word	0x080060f5
 8006030:	080060f5 	.word	0x080060f5
 8006034:	080060a7 	.word	0x080060a7
 8006038:	080060f5 	.word	0x080060f5
 800603c:	080060f5 	.word	0x080060f5
 8006040:	080060f5 	.word	0x080060f5
 8006044:	080060f5 	.word	0x080060f5
 8006048:	080060f5 	.word	0x080060f5
 800604c:	080060f5 	.word	0x080060f5
 8006050:	080060f5 	.word	0x080060f5
 8006054:	080060f5 	.word	0x080060f5
 8006058:	080060f5 	.word	0x080060f5
 800605c:	080060f5 	.word	0x080060f5
 8006060:	080060f5 	.word	0x080060f5
 8006064:	080060f5 	.word	0x080060f5
 8006068:	080060f5 	.word	0x080060f5
 800606c:	080060f5 	.word	0x080060f5
 8006070:	080060f5 	.word	0x080060f5
 8006074:	080060e7 	.word	0x080060e7
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d037      	beq.n	80060ec <UART_SetConfig+0x6bc>
 800607c:	e03a      	b.n	80060f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800607e:	f7fe fd95 	bl	8004bac <HAL_RCCEx_GetD3PCLK1Freq>
 8006082:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006084:	e03c      	b.n	8006100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fda4 	bl	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006094:	e034      	b.n	8006100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006096:	f107 0318 	add.w	r3, r7, #24
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fef0 	bl	8004e80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060a4:	e02c      	b.n	8006100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <UART_SetConfig+0x69c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d016      	beq.n	80060e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060b2:	4b06      	ldr	r3, [pc, #24]	; (80060cc <UART_SetConfig+0x69c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	08db      	lsrs	r3, r3, #3
 80060b8:	f003 0303 	and.w	r3, r3, #3
 80060bc:	4a07      	ldr	r2, [pc, #28]	; (80060dc <UART_SetConfig+0x6ac>)
 80060be:	fa22 f303 	lsr.w	r3, r2, r3
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060c4:	e01c      	b.n	8006100 <UART_SetConfig+0x6d0>
 80060c6:	bf00      	nop
 80060c8:	40011400 	.word	0x40011400
 80060cc:	58024400 	.word	0x58024400
 80060d0:	40007800 	.word	0x40007800
 80060d4:	40007c00 	.word	0x40007c00
 80060d8:	58000c00 	.word	0x58000c00
 80060dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80060e0:	4b9d      	ldr	r3, [pc, #628]	; (8006358 <UART_SetConfig+0x928>)
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060e4:	e00c      	b.n	8006100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060e6:	4b9d      	ldr	r3, [pc, #628]	; (800635c <UART_SetConfig+0x92c>)
 80060e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060ea:	e009      	b.n	8006100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f2:	e005      	b.n	8006100 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80060fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 81de 	beq.w	80064c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	4a94      	ldr	r2, [pc, #592]	; (8006360 <UART_SetConfig+0x930>)
 800610e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006112:	461a      	mov	r2, r3
 8006114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006116:	fbb3 f3f2 	udiv	r3, r3, r2
 800611a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006128:	429a      	cmp	r2, r3
 800612a:	d305      	bcc.n	8006138 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006134:	429a      	cmp	r2, r3
 8006136:	d903      	bls.n	8006140 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800613e:	e1c1      	b.n	80064c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006142:	2200      	movs	r2, #0
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	60fa      	str	r2, [r7, #12]
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	4a84      	ldr	r2, [pc, #528]	; (8006360 <UART_SetConfig+0x930>)
 800614e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006152:	b29b      	uxth	r3, r3
 8006154:	2200      	movs	r2, #0
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800615e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006162:	f7fa f8b9 	bl	80002d8 <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4610      	mov	r0, r2
 800616c:	4619      	mov	r1, r3
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	020b      	lsls	r3, r1, #8
 8006178:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800617c:	0202      	lsls	r2, r0, #8
 800617e:	6979      	ldr	r1, [r7, #20]
 8006180:	6849      	ldr	r1, [r1, #4]
 8006182:	0849      	lsrs	r1, r1, #1
 8006184:	2000      	movs	r0, #0
 8006186:	460c      	mov	r4, r1
 8006188:	4605      	mov	r5, r0
 800618a:	eb12 0804 	adds.w	r8, r2, r4
 800618e:	eb43 0905 	adc.w	r9, r3, r5
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	469a      	mov	sl, r3
 800619a:	4693      	mov	fp, r2
 800619c:	4652      	mov	r2, sl
 800619e:	465b      	mov	r3, fp
 80061a0:	4640      	mov	r0, r8
 80061a2:	4649      	mov	r1, r9
 80061a4:	f7fa f898 	bl	80002d8 <__aeabi_uldivmod>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4613      	mov	r3, r2
 80061ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b6:	d308      	bcc.n	80061ca <UART_SetConfig+0x79a>
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061be:	d204      	bcs.n	80061ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061c6:	60da      	str	r2, [r3, #12]
 80061c8:	e17c      	b.n	80064c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061d0:	e178      	b.n	80064c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061da:	f040 80c5 	bne.w	8006368 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80061de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	dc48      	bgt.n	8006278 <UART_SetConfig+0x848>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	db7b      	blt.n	80062e2 <UART_SetConfig+0x8b2>
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d879      	bhi.n	80062e2 <UART_SetConfig+0x8b2>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x7c4>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	0800627f 	.word	0x0800627f
 80061f8:	08006287 	.word	0x08006287
 80061fc:	080062e3 	.word	0x080062e3
 8006200:	080062e3 	.word	0x080062e3
 8006204:	0800628f 	.word	0x0800628f
 8006208:	080062e3 	.word	0x080062e3
 800620c:	080062e3 	.word	0x080062e3
 8006210:	080062e3 	.word	0x080062e3
 8006214:	0800629f 	.word	0x0800629f
 8006218:	080062e3 	.word	0x080062e3
 800621c:	080062e3 	.word	0x080062e3
 8006220:	080062e3 	.word	0x080062e3
 8006224:	080062e3 	.word	0x080062e3
 8006228:	080062e3 	.word	0x080062e3
 800622c:	080062e3 	.word	0x080062e3
 8006230:	080062e3 	.word	0x080062e3
 8006234:	080062af 	.word	0x080062af
 8006238:	080062e3 	.word	0x080062e3
 800623c:	080062e3 	.word	0x080062e3
 8006240:	080062e3 	.word	0x080062e3
 8006244:	080062e3 	.word	0x080062e3
 8006248:	080062e3 	.word	0x080062e3
 800624c:	080062e3 	.word	0x080062e3
 8006250:	080062e3 	.word	0x080062e3
 8006254:	080062e3 	.word	0x080062e3
 8006258:	080062e3 	.word	0x080062e3
 800625c:	080062e3 	.word	0x080062e3
 8006260:	080062e3 	.word	0x080062e3
 8006264:	080062e3 	.word	0x080062e3
 8006268:	080062e3 	.word	0x080062e3
 800626c:	080062e3 	.word	0x080062e3
 8006270:	080062e3 	.word	0x080062e3
 8006274:	080062d5 	.word	0x080062d5
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d02e      	beq.n	80062da <UART_SetConfig+0x8aa>
 800627c:	e031      	b.n	80062e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800627e:	f7fd fa5f 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8006282:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006284:	e033      	b.n	80062ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006286:	f7fd fa71 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 800628a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800628c:	e02f      	b.n	80062ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800628e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fca0 	bl	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800629c:	e027      	b.n	80062ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800629e:	f107 0318 	add.w	r3, r7, #24
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe fdec 	bl	8004e80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ac:	e01f      	b.n	80062ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ae:	4b2d      	ldr	r3, [pc, #180]	; (8006364 <UART_SetConfig+0x934>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062ba:	4b2a      	ldr	r3, [pc, #168]	; (8006364 <UART_SetConfig+0x934>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	08db      	lsrs	r3, r3, #3
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	4a24      	ldr	r2, [pc, #144]	; (8006358 <UART_SetConfig+0x928>)
 80062c6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062cc:	e00f      	b.n	80062ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062ce:	4b22      	ldr	r3, [pc, #136]	; (8006358 <UART_SetConfig+0x928>)
 80062d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062d2:	e00c      	b.n	80062ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062d4:	4b21      	ldr	r3, [pc, #132]	; (800635c <UART_SetConfig+0x92c>)
 80062d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062d8:	e009      	b.n	80062ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062e0:	e005      	b.n	80062ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80e7 	beq.w	80064c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	4a19      	ldr	r2, [pc, #100]	; (8006360 <UART_SetConfig+0x930>)
 80062fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006300:	461a      	mov	r2, r3
 8006302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006304:	fbb3 f3f2 	udiv	r3, r3, r2
 8006308:	005a      	lsls	r2, r3, #1
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	085b      	lsrs	r3, r3, #1
 8006310:	441a      	add	r2, r3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	fbb2 f3f3 	udiv	r3, r2, r3
 800631a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	2b0f      	cmp	r3, #15
 8006320:	d916      	bls.n	8006350 <UART_SetConfig+0x920>
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006328:	d212      	bcs.n	8006350 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	b29b      	uxth	r3, r3
 800632e:	f023 030f 	bic.w	r3, r3, #15
 8006332:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	085b      	lsrs	r3, r3, #1
 8006338:	b29b      	uxth	r3, r3
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	b29a      	uxth	r2, r3
 8006340:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006342:	4313      	orrs	r3, r2
 8006344:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800634c:	60da      	str	r2, [r3, #12]
 800634e:	e0b9      	b.n	80064c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006356:	e0b5      	b.n	80064c4 <UART_SetConfig+0xa94>
 8006358:	03d09000 	.word	0x03d09000
 800635c:	003d0900 	.word	0x003d0900
 8006360:	080071d0 	.word	0x080071d0
 8006364:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006368:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800636c:	2b20      	cmp	r3, #32
 800636e:	dc49      	bgt.n	8006404 <UART_SetConfig+0x9d4>
 8006370:	2b00      	cmp	r3, #0
 8006372:	db7c      	blt.n	800646e <UART_SetConfig+0xa3e>
 8006374:	2b20      	cmp	r3, #32
 8006376:	d87a      	bhi.n	800646e <UART_SetConfig+0xa3e>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <UART_SetConfig+0x950>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	0800640b 	.word	0x0800640b
 8006384:	08006413 	.word	0x08006413
 8006388:	0800646f 	.word	0x0800646f
 800638c:	0800646f 	.word	0x0800646f
 8006390:	0800641b 	.word	0x0800641b
 8006394:	0800646f 	.word	0x0800646f
 8006398:	0800646f 	.word	0x0800646f
 800639c:	0800646f 	.word	0x0800646f
 80063a0:	0800642b 	.word	0x0800642b
 80063a4:	0800646f 	.word	0x0800646f
 80063a8:	0800646f 	.word	0x0800646f
 80063ac:	0800646f 	.word	0x0800646f
 80063b0:	0800646f 	.word	0x0800646f
 80063b4:	0800646f 	.word	0x0800646f
 80063b8:	0800646f 	.word	0x0800646f
 80063bc:	0800646f 	.word	0x0800646f
 80063c0:	0800643b 	.word	0x0800643b
 80063c4:	0800646f 	.word	0x0800646f
 80063c8:	0800646f 	.word	0x0800646f
 80063cc:	0800646f 	.word	0x0800646f
 80063d0:	0800646f 	.word	0x0800646f
 80063d4:	0800646f 	.word	0x0800646f
 80063d8:	0800646f 	.word	0x0800646f
 80063dc:	0800646f 	.word	0x0800646f
 80063e0:	0800646f 	.word	0x0800646f
 80063e4:	0800646f 	.word	0x0800646f
 80063e8:	0800646f 	.word	0x0800646f
 80063ec:	0800646f 	.word	0x0800646f
 80063f0:	0800646f 	.word	0x0800646f
 80063f4:	0800646f 	.word	0x0800646f
 80063f8:	0800646f 	.word	0x0800646f
 80063fc:	0800646f 	.word	0x0800646f
 8006400:	08006461 	.word	0x08006461
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	d02e      	beq.n	8006466 <UART_SetConfig+0xa36>
 8006408:	e031      	b.n	800646e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800640a:	f7fd f999 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 800640e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006410:	e033      	b.n	800647a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006412:	f7fd f9ab 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 8006416:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006418:	e02f      	b.n	800647a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800641a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe fbda 	bl	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006428:	e027      	b.n	800647a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800642a:	f107 0318 	add.w	r3, r7, #24
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fd26 	bl	8004e80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006438:	e01f      	b.n	800647a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800643a:	4b2d      	ldr	r3, [pc, #180]	; (80064f0 <UART_SetConfig+0xac0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006446:	4b2a      	ldr	r3, [pc, #168]	; (80064f0 <UART_SetConfig+0xac0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	08db      	lsrs	r3, r3, #3
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	4a28      	ldr	r2, [pc, #160]	; (80064f4 <UART_SetConfig+0xac4>)
 8006452:	fa22 f303 	lsr.w	r3, r2, r3
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006458:	e00f      	b.n	800647a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800645a:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <UART_SetConfig+0xac4>)
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800645e:	e00c      	b.n	800647a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <UART_SetConfig+0xac8>)
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006464:	e009      	b.n	800647a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800646c:	e005      	b.n	800647a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006478:	bf00      	nop
    }

    if (pclk != 0U)
 800647a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d021      	beq.n	80064c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	4a1d      	ldr	r2, [pc, #116]	; (80064fc <UART_SetConfig+0xacc>)
 8006486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648a:	461a      	mov	r2, r3
 800648c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	441a      	add	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	2b0f      	cmp	r3, #15
 80064a8:	d909      	bls.n	80064be <UART_SetConfig+0xa8e>
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b0:	d205      	bcs.n	80064be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60da      	str	r2, [r3, #12]
 80064bc:	e002      	b.n	80064c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2200      	movs	r2, #0
 80064d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80064e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3748      	adds	r7, #72	; 0x48
 80064e8:	46bd      	mov	sp, r7
 80064ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ee:	bf00      	nop
 80064f0:	58024400 	.word	0x58024400
 80064f4:	03d09000 	.word	0x03d09000
 80064f8:	003d0900 	.word	0x003d0900
 80064fc:	080071d0 	.word	0x080071d0

08006500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01a      	beq.n	8006616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065fe:	d10a      	bne.n	8006616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	605a      	str	r2, [r3, #4]
  }
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b098      	sub	sp, #96	; 0x60
 8006648:	af02      	add	r7, sp, #8
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006654:	f7fa fe4a 	bl	80012ec <HAL_GetTick>
 8006658:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b08      	cmp	r3, #8
 8006666:	d12f      	bne.n	80066c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006670:	2200      	movs	r2, #0
 8006672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f88e 	bl	8006798 <UART_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d022      	beq.n	80066c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006696:	653b      	str	r3, [r7, #80]	; 0x50
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a0:	647b      	str	r3, [r7, #68]	; 0x44
 80066a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e6      	bne.n	8006682 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e063      	b.n	8006790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d149      	bne.n	800676a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066de:	2200      	movs	r2, #0
 80066e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f857 	bl	8006798 <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d03c      	beq.n	800676a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	623b      	str	r3, [r7, #32]
   return(result);
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670e:	633b      	str	r3, [r7, #48]	; 0x30
 8006710:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e6      	bne.n	80066f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3308      	adds	r3, #8
 8006728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	60fb      	str	r3, [r7, #12]
   return(result);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	64bb      	str	r3, [r7, #72]	; 0x48
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006742:	61fa      	str	r2, [r7, #28]
 8006744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	69b9      	ldr	r1, [r7, #24]
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	617b      	str	r3, [r7, #20]
   return(result);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e5      	bne.n	8006722 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e012      	b.n	8006790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3758      	adds	r7, #88	; 0x58
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	4613      	mov	r3, r2
 80067a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a8:	e049      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d045      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b2:	f7fa fd9b 	bl	80012ec <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d302      	bcc.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e048      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d031      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d110      	bne.n	800680a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2208      	movs	r2, #8
 80067ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f839 	bl	8006868 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2208      	movs	r2, #8
 80067fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e029      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006818:	d111      	bne.n	800683e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f81f 	bl	8006868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e00f      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4013      	ands	r3, r2
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	bf0c      	ite	eq
 800684e:	2301      	moveq	r3, #1
 8006850:	2300      	movne	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	429a      	cmp	r2, r3
 800685a:	d0a6      	beq.n	80067aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b095      	sub	sp, #84	; 0x54
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006884:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688e:	643b      	str	r3, [r7, #64]	; 0x40
 8006890:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e6      	bne.n	8006870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	4b1e      	ldr	r3, [pc, #120]	; (8006930 <UART_EndRxTransfer+0xc8>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e5      	bne.n	80068a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d118      	bne.n	8006910 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f023 0310 	bic.w	r3, r3, #16
 80068f2:	647b      	str	r3, [r7, #68]	; 0x44
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068fc:	61bb      	str	r3, [r7, #24]
 80068fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6979      	ldr	r1, [r7, #20]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	613b      	str	r3, [r7, #16]
   return(result);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e6      	bne.n	80068de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006924:	bf00      	nop
 8006926:	3754      	adds	r7, #84	; 0x54
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	effffffe 	.word	0xeffffffe

08006934 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_UARTEx_DisableFifoMode+0x16>
 8006946:	2302      	movs	r3, #2
 8006948:	e027      	b.n	800699a <HAL_UARTEx_DisableFifoMode+0x66>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2224      	movs	r2, #36	; 0x24
 8006956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006978:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e02d      	b.n	8006a1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2224      	movs	r2, #36	; 0x24
 80069ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0201 	bic.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f850 	bl	8006aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e02d      	b.n	8006a96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2224      	movs	r2, #36	; 0x24
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f812 	bl	8006aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d108      	bne.n	8006ac2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ac0:	e031      	b.n	8006b26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ac2:	2310      	movs	r3, #16
 8006ac4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ac6:	2310      	movs	r3, #16
 8006ac8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	0e5b      	lsrs	r3, r3, #25
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	0f5b      	lsrs	r3, r3, #29
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	7b3a      	ldrb	r2, [r7, #12]
 8006aee:	4911      	ldr	r1, [pc, #68]	; (8006b34 <UARTEx_SetNbDataToProcess+0x94>)
 8006af0:	5c8a      	ldrb	r2, [r1, r2]
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006af6:	7b3a      	ldrb	r2, [r7, #12]
 8006af8:	490f      	ldr	r1, [pc, #60]	; (8006b38 <UARTEx_SetNbDataToProcess+0x98>)
 8006afa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	7b7a      	ldrb	r2, [r7, #13]
 8006b0c:	4909      	ldr	r1, [pc, #36]	; (8006b34 <UARTEx_SetNbDataToProcess+0x94>)
 8006b0e:	5c8a      	ldrb	r2, [r1, r2]
 8006b10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b14:	7b7a      	ldrb	r2, [r7, #13]
 8006b16:	4908      	ldr	r1, [pc, #32]	; (8006b38 <UARTEx_SetNbDataToProcess+0x98>)
 8006b18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b26:	bf00      	nop
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	080071e8 	.word	0x080071e8
 8006b38:	080071f0 	.word	0x080071f0

08006b3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	f107 001c 	add.w	r0, r7, #28
 8006b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d120      	bne.n	8006b96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	4b2a      	ldr	r3, [pc, #168]	; (8006c10 <USB_CoreInit+0xd4>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d105      	bne.n	8006b8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 faac 	bl	80070e8 <USB_CoreReset>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]
 8006b94:	e01a      	b.n	8006bcc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 faa0 	bl	80070e8 <USB_CoreReset>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8006bbe:	e005      	b.n	8006bcc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d116      	bne.n	8006c00 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006be0:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <USB_CoreInit+0xd8>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f043 0206 	orr.w	r2, r3, #6
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f043 0220 	orr.w	r2, r3, #32
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c0c:	b004      	add	sp, #16
 8006c0e:	4770      	bx	lr
 8006c10:	ffbdffbf 	.word	0xffbdffbf
 8006c14:	03ee0000 	.word	0x03ee0000

08006c18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f023 0201 	bic.w	r2, r3, #1
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d115      	bne.n	8006c88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c68:	2001      	movs	r0, #1
 8006c6a:	f7fa fb4b 	bl	8001304 <HAL_Delay>
      ms++;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fa29 	bl	80070cc <USB_GetMode>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d01e      	beq.n	8006cbe <USB_SetCurrentMode+0x84>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b31      	cmp	r3, #49	; 0x31
 8006c84:	d9f0      	bls.n	8006c68 <USB_SetCurrentMode+0x2e>
 8006c86:	e01a      	b.n	8006cbe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d115      	bne.n	8006cba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	f7fa fb32 	bl	8001304 <HAL_Delay>
      ms++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa10 	bl	80070cc <USB_GetMode>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <USB_SetCurrentMode+0x84>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b31      	cmp	r3, #49	; 0x31
 8006cb6:	d9f0      	bls.n	8006c9a <USB_SetCurrentMode+0x60>
 8006cb8:	e001      	b.n	8006cbe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e005      	b.n	8006cca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b32      	cmp	r3, #50	; 0x32
 8006cc2:	d101      	bne.n	8006cc8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	e009      	b.n	8006d08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	3340      	adds	r3, #64	; 0x40
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	2200      	movs	r2, #0
 8006d00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3301      	adds	r3, #1
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b0e      	cmp	r3, #14
 8006d0c:	d9f2      	bls.n	8006cf4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d11c      	bne.n	8006d4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d22:	f043 0302 	orr.w	r3, r3, #2
 8006d26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	e005      	b.n	8006d5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d60:	461a      	mov	r2, r3
 8006d62:	2300      	movs	r3, #0
 8006d64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d74:	461a      	mov	r2, r3
 8006d76:	680b      	ldr	r3, [r1, #0]
 8006d78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d10c      	bne.n	8006d9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d86:	2100      	movs	r1, #0
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f965 	bl	8007058 <USB_SetDevSpeed>
 8006d8e:	e008      	b.n	8006da2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d90:	2101      	movs	r1, #1
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f960 	bl	8007058 <USB_SetDevSpeed>
 8006d98:	e003      	b.n	8006da2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d9a:	2103      	movs	r1, #3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f95b 	bl	8007058 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006da2:	2110      	movs	r1, #16
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f8f3 	bl	8006f90 <USB_FlushTxFifo>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f91f 	bl	8006ff8 <USB_FlushRxFifo>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dca:	461a      	mov	r2, r3
 8006dcc:	2300      	movs	r3, #0
 8006dce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	2300      	movs	r3, #0
 8006dda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	461a      	mov	r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de8:	2300      	movs	r3, #0
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	e043      	b.n	8006e76 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e04:	d118      	bne.n	8006e38 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	e013      	b.n	8006e4a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	e008      	b.n	8006e4a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e44:	461a      	mov	r2, r3
 8006e46:	2300      	movs	r3, #0
 8006e48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e56:	461a      	mov	r2, r3
 8006e58:	2300      	movs	r3, #0
 8006e5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	3301      	adds	r3, #1
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d3b7      	bcc.n	8006dee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e7e:	2300      	movs	r3, #0
 8006e80:	613b      	str	r3, [r7, #16]
 8006e82:	e043      	b.n	8006f0c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e9a:	d118      	bne.n	8006ece <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	e013      	b.n	8006ee0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	e008      	b.n	8006ee0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eda:	461a      	mov	r2, r3
 8006edc:	2300      	movs	r3, #0
 8006ede:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eec:	461a      	mov	r2, r3
 8006eee:	2300      	movs	r3, #0
 8006ef0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efe:	461a      	mov	r2, r3
 8006f00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d3b7      	bcc.n	8006e84 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d105      	bne.n	8006f48 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f043 0210 	orr.w	r2, r3, #16
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699a      	ldr	r2, [r3, #24]
 8006f4c:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <USB_DevInit+0x2b4>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	f043 0208 	orr.w	r2, r3, #8
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d105      	bne.n	8006f78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699a      	ldr	r2, [r3, #24]
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <USB_DevInit+0x2b8>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f84:	b004      	add	sp, #16
 8006f86:	4770      	bx	lr
 8006f88:	803c3800 	.word	0x803c3800
 8006f8c:	40000004 	.word	0x40000004

08006f90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <USB_FlushTxFifo+0x64>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d901      	bls.n	8006fb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e01b      	b.n	8006fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	daf2      	bge.n	8006f9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	019b      	lsls	r3, r3, #6
 8006fc0:	f043 0220 	orr.w	r2, r3, #32
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4a08      	ldr	r2, [pc, #32]	; (8006ff4 <USB_FlushTxFifo+0x64>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d901      	bls.n	8006fda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e006      	b.n	8006fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d0f0      	beq.n	8006fc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	00030d40 	.word	0x00030d40

08006ff8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3301      	adds	r3, #1
 8007008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a11      	ldr	r2, [pc, #68]	; (8007054 <USB_FlushRxFifo+0x5c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d901      	bls.n	8007016 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e018      	b.n	8007048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	daf2      	bge.n	8007004 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2210      	movs	r2, #16
 8007026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3301      	adds	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4a08      	ldr	r2, [pc, #32]	; (8007054 <USB_FlushRxFifo+0x5c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d901      	bls.n	800703a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e006      	b.n	8007048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b10      	cmp	r3, #16
 8007044:	d0f0      	beq.n	8007028 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	00030d40 	.word	0x00030d40

08007058 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	68f9      	ldr	r1, [r7, #12]
 8007074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007078:	4313      	orrs	r3, r2
 800707a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070a4:	f023 0303 	bic.w	r3, r3, #3
 80070a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b8:	f043 0302 	orr.w	r3, r3, #2
 80070bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	f003 0301 	and.w	r3, r3, #1
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4a13      	ldr	r2, [pc, #76]	; (800714c <USB_CoreReset+0x64>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e01b      	b.n	800713e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	daf2      	bge.n	80070f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f043 0201 	orr.w	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4a09      	ldr	r2, [pc, #36]	; (800714c <USB_CoreReset+0x64>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d901      	bls.n	8007130 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e006      	b.n	800713e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b01      	cmp	r3, #1
 800713a:	d0f0      	beq.n	800711e <USB_CoreReset+0x36>

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	00030d40 	.word	0x00030d40

08007150 <memset>:
 8007150:	4402      	add	r2, r0
 8007152:	4603      	mov	r3, r0
 8007154:	4293      	cmp	r3, r2
 8007156:	d100      	bne.n	800715a <memset+0xa>
 8007158:	4770      	bx	lr
 800715a:	f803 1b01 	strb.w	r1, [r3], #1
 800715e:	e7f9      	b.n	8007154 <memset+0x4>

08007160 <__libc_init_array>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	4d0d      	ldr	r5, [pc, #52]	; (8007198 <__libc_init_array+0x38>)
 8007164:	4c0d      	ldr	r4, [pc, #52]	; (800719c <__libc_init_array+0x3c>)
 8007166:	1b64      	subs	r4, r4, r5
 8007168:	10a4      	asrs	r4, r4, #2
 800716a:	2600      	movs	r6, #0
 800716c:	42a6      	cmp	r6, r4
 800716e:	d109      	bne.n	8007184 <__libc_init_array+0x24>
 8007170:	4d0b      	ldr	r5, [pc, #44]	; (80071a0 <__libc_init_array+0x40>)
 8007172:	4c0c      	ldr	r4, [pc, #48]	; (80071a4 <__libc_init_array+0x44>)
 8007174:	f000 f818 	bl	80071a8 <_init>
 8007178:	1b64      	subs	r4, r4, r5
 800717a:	10a4      	asrs	r4, r4, #2
 800717c:	2600      	movs	r6, #0
 800717e:	42a6      	cmp	r6, r4
 8007180:	d105      	bne.n	800718e <__libc_init_array+0x2e>
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	f855 3b04 	ldr.w	r3, [r5], #4
 8007188:	4798      	blx	r3
 800718a:	3601      	adds	r6, #1
 800718c:	e7ee      	b.n	800716c <__libc_init_array+0xc>
 800718e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007192:	4798      	blx	r3
 8007194:	3601      	adds	r6, #1
 8007196:	e7f2      	b.n	800717e <__libc_init_array+0x1e>
 8007198:	08007200 	.word	0x08007200
 800719c:	08007200 	.word	0x08007200
 80071a0:	08007200 	.word	0x08007200
 80071a4:	08007204 	.word	0x08007204

080071a8 <_init>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr

080071b4 <_fini>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr
